classdef NoiseEstimationProcess < ImageAnalysisProcess
    % Concrete class for a noise estimation process
    %
    % Sebastien Besson, 5/2011
    
    methods
        function obj = NoiseEstimationProcess(owner,outputDir,funParams)
            
            if nargin == 0
                super_args = {};
            else
                super_args{1} = owner;
                super_args{2} = NoiseEstimationProcess.getName;
            end
            
            obj = obj@ImageAnalysisProcess(super_args{:});
            
            obj.funName_ = @calculateMovieNoiseParam;
            if nargin < 3 || isempty(funParams)
                
                %----Defaults----%
                funParams.ChannelIndex = 1 : numel(owner.channels_);
                funParams.OutputDirectory = [outputDir  filesep 'noise'];
                funParams.firstImage = ones(size(owner.channels_));
                funParams.lastImage = owner.nFrames_*ones(size(owner.channels_));
                funParams.cropROI = repmat([1 1 owner.imSize_(end:-1:1)],numel(owner.channels_),1);
                funParams.loadExternalFile = [];
                psfSigmaCheck =arrayfun(@(x)isempty(x.psfSigma_),owner.channels_);
                if any(psfSigmaCheck)                    
                    funParams.filterSigma = zeros(size(owner.channels_));
                else
                    funParams.filterSigma = [owner.channels_.psfSigma_];
                end
            end
            
            %Make sure the input parameters are legit??
            obj.funParams_ = funParams;
        end
        
        function sanityCheck(obj)
            if 2*max(2*obj.funParams_.filterSigma+1)>min(obj.funParams_.cropROI(3:4))
                errordlg(['The intensity drop at the borders generated by the filtering biases pixel intensities'...
                    'throughout the whole image. Please select larger image or smaller sigma.']);
                return;
            end
            
            nChan = numel(obj.owner_.channels_);
            if isempty(obj.funParams_.ChannelIndex) || max(obj.funParams_.ChannelIndex) > nChan...
                    || min(obj.funParams_.ChannelIndex)<1 ||...
                    ~isequal(round(obj.funParams_.ChannelIndex),obj.funParams_.ChannelIndex)
                error('Invalid channel numbers specified! Check ChannelIndex input!!')
            end
        end
        
        function status = checkChannelOutput(obj)
           %Makes sure there's at least one .mat file in the speified
           %directory
           status = logical(exist(obj.outFilePaths_{1},'file'));
        end
        
        
        function varargout = loadChannelOutput(obj,varargin)
            
            % Input check
            outputList = {'I0','sDN','GaussRatio'};
            ip =inputParser;
            ip.addRequired('obj');
            ip.addParamValue('output',outputList,@(x) all(ismember(x,outputList)));
            ip.parse(obj,varargin{:})
            output = ip.Results.output; 
            if ischar(output), output={output}; end
            
            s =load(obj.outFilePaths_{1},output{:});
            % Initialize output
            for j=1:numel(output)      
                varargout{j} = s.(output{j});
            end
        end
    end
    methods (Static)
        function name = getName()
            name ='Noise Estimation';
        end
        function h = GUI()
            h= @noiseEstimationProcessGUI;
        end
    end
end

