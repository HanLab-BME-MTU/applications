%cellXploreMan(data, varargin) interactive display of movies via 2D DR plot.
%
% Inputs:
% 		  data:	cell array containing the cell DR coordinates, labels, 
%			% and movie paths as well as other metadata.
%
% Outputs:  		Can manually save snapshots of plots/annotations
%
%
% Andrew R. Jamieson, Dec. 2016


function [handles] = cellXploreDR(data, varargin)


ip = inputParser;
ip.KeepUnmatched = true;
ip.CaseSensitive = false;
ip.addRequired('data', @isstruct);
ip.addParameter('movies', [], @iscell);
ip.parse(data, varargin{:});
data.movies = ip.Results.movies;

% Set Filter, Label, and DR Types (+ colors)
colorset = {'brgykop'};

% Initialize Label Dictionary
initializeDataStruct();


    function initializeDataStruct()
        % Place commands here for standard setup based on Assaf's input
        % Standard 
        
        % data structure ---
        % all are indexed by mindex (respected order)
        % [DR] data.DR.{DRtype} == store 2D x,y coordinates (use fieldname)
        % [classLabels] data.meta.class.{classType} ==  store cell array of
        %   name labels for each data point
        % [custom-classLabels] data.meta.class.custom.{custClasstype} ==  store cell array of
        %   name custom labels for each data point (initialize as one class '-' for all)
        % [notes] data.meta.notes == cell array of notes for each data
        %   point
        % [annotations - types] data.meta.anno.set == cell array of annotation
        %   labels available
        % [annotations - tags] data.meta.anno.tags == array of cells contatining annotation
        %   tags (in order of mindex)
        % [annotation hash map] data.meta.anno.map == dict mapping each
        %   annotation tag as a key and storing an array of the mindex set , 
        %   used for rapid recovery of indicies and plotting. updated as
        %   new annotations are conducted.
        % 
        
        % using containers.Map
%         dictLabels = containers.Map({'TumorType','CellType'},...
%                               {data.meta.tumorTypeName,data.meta.cellType});
%         dictCust = containers.Map({'Custom'},...
%                               {repmat({'none'}, length(data.meta.mindex),1)});
%         data.meta.dictLabels = dictLabels;
%         data.meta.dictCust = dictCust;
        
        % [class labels] using struct.
        data.meta.class.tumorTypeName = data.meta.tumorTypeName;
        data.meta.class.cellType = data.meta.cellType;
        data.meta.class.custom.all = repmat({'-'}, length(data.meta.mindex),1);
 
        % [DR types]
        data.DR.tSNE = data.tSNE;
        data.DR.PCA = data.PCA;
        
        % [notes]
        data.meta.notes = repmat({''}, length(data.meta.mindex),1);
        
        % [Annotations]
        data.meta.anno.set = {'Ø'};
        data.meta.anno.tags = repmat({'Ø'}, length(data.meta.mindex),1);
        
        updateInfo();
    end

    function updateInfo()
        
        % using structs
        handles.info.labelTypes = fieldnames(data.meta.class);
        handles.info.CustomTypes = fieldnames(data.meta.class.custom);

        % [DR types]
        handles.info.DRTypes_ = fieldnames(data.DR);
        % [notes]
        
        % [Annotations]
    end

%     function createNewLabel(labelTypeName, classes)
%     
%         dict = data.meta.dict;
%         dict(labelTypeName) = 
%         
%     end



[~, G2] = grp2idx(data.meta.cellType);
[~, G2i] = grp2idx(data.meta.tumorTypeName);
cellTypes = [{ 'All' }, G2']; 
TumorTypeLabels = [{ 'All' }, G2i']; 
% DRtypes_ = {'PCA'; 'tSNE'};
% 
% handles.info.DRtypes_ = DRtypes_;
handles.info.Annotations = repmat({'Notes here ...'}, length(data.meta.mindex),1);

% initialize the custom data labels to 'none'
% data.meta.CustomType = repmat({'none'}, length(data.meta.mindex),1);
%===============================================================================
% Setup main GUI window/figure
%===============================================================================
xsizeF = 975;
ysizeF = 550;
ysizeF = ysizeF + 25*numel(handles.info.labelTypes);
% Create main figure
handles.h1 = figure(...
'Units','pixels', 'Position',[20 40 xsizeF ysizeF],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'CurrentAxesMode','manual',...
'IntegerHandle','on',...
'MenuBar','none',...
'Name','cellXplore',...
'NumberTitle','off',...
'Tag','cellXplore',...
'Resize','off',...
'PaperPosition', get(0,'defaultfigurePaperPosition'),...
'ScreenPixelsPerInchMode','manual',...
'HandleVisibility','callback');

handles.mainP = uipanel(...
'Parent',handles.h1,...
'FontUnits','pixels',...
'Units','pixels',...
'Title','Cell Explorer',...
'Tag','uipanel8',...
'Position',[5 5 xsizeF-10 ysizeF-15],...
'FontSize',16,...
'FontWeight','bold');

%-------------------------------------------------------------------------------
% Control/Movie panels of GUI
%-------------------------------------------------------------------------------

% Start from bottom left
% Left to right will be fixed.  
% Dynamically expand vertically.
% Standard Distance of 5 pixel between panel
gapSize = 5;
% Data Selection Panel
xSizeSelectPanel = 366;
% ---> insert dynamic size info here
ySizeSelectPanel = 100 + 25*numel(handles.info.labelTypes); 

% DR Panel
xPosDR = gapSize;
yPosDR = ySizeSelectPanel + gapSize*2;
xSizeDRPanel= xSizeSelectPanel;
ySizeDRPanel = 400;


% Movie Panel
xSizeLabelPanel = 310;

handles.DataSel = uipanel('Parent',handles.mainP,'FontUnits','pixels','Units','pixels',...
'Title','Data Selection/View Criterion','Tag','uipanel_select',...
'Position',[gapSize gapSize xSizeSelectPanel ySizeSelectPanel],...
'FontSize',13,'FontSizeMode',...
get(0,'defaultuipanelFontSizeMode'));

handles.h2_DR = uipanel('Parent',handles.mainP, 'FontUnits','pixels', 'Units','pixels',...
'Title','2D Visualization - Dimension Reduction',...
'Tag','uipanel_axes',...
'Position',[handles.DataSel.Position(1), handles.DataSel.Position(4)+handles.DataSel.Position(2)+gapSize, xSizeDRPanel, ySizeDRPanel],...
'FontSize',13,'FontSizeMode',...
get(0,'defaultuipanelFontSizeMode'));

handles.LabelA = uipanel('Parent',handles.mainP,'FontUnits','pixels','Units','pixels',...
'Title','Cell Labeling',...
'Tag','uipanel_annotate',...
'Position',[handles.h2_DR.Position(3)+handles.h2_DR.Position(1)+gapSize, handles.DataSel.Position(2), xSizeLabelPanel 300],...
'FontSize',13,'FontSizeMode',get(0,'defaultuipanelFontSizeMode'));

handles.h_movie = uipanel(...
'Parent',handles.mainP,'FontUnits','pixels','Units','pixels',...
'Title','Cell Movie',...
'Tag','uipanel_video',...
'Position',[handles.h2_DR.Position(3)+handles.h2_DR.Position(1)+gapSize, handles.LabelA.Position(2)+handles.LabelA.Position(4)+gapSize, handles.LabelA.Position(3),...
 handles.mainP.Position(4)-handles.LabelA.Position(4)-35],...
'FontSize',13,'FontSizeMode',get(0,'defaultuipanelFontSizeMode'));





% annotations & save button
handles.annotate = uicontrol(...
'Parent',handles.LabelA,...
'FontUnits','pixels',...
'String','Notes here ...',...
'Style','edit',...
'HorizontalAlignment','left',...
'Position',[5 5 296 22],...
'Tag','AnnotationNotes',...
'FontSize',13);

handles.SaveNotesButton = uicontrol(...
'Parent',handles.LabelA,...
'FontUnits','pixels',...
'Units','pixels',...
'String','Save Notes',...
'Position',[5 30 67 21],...
'Callback',@SaveNotes_Callback,...
'Tag','SaveNotes',...
'FontSize',10);

function SaveNotes_Callback(varargin)
    Anotes = get(handles.annotate, 'String');
    handles.info.Annotations{handles.selPtIdx} = Anotes;
end

%-------------------------------------------------------------------------------
% DR Type 
%-------------------------------------------------------------------------------

handles.DRType = uibuttongroup(...
'Parent',handles.DataSel,...
'FontUnits','points',...
'Units','pixels',...
'Title','DR Type',...
'Tag','uibuttongroup1',...
'Position',[handles.DataSel.Position(3)-68, handles.DataSel.Position(4)-(numel(handles.info.DRTypes_)*25+25), 60, numel(handles.info.DRTypes_)*25+10],...
'SelectionChangedFcn',@(DRType, event) DRselection(DRType, event));

function DRselection(~, event)
   disp(['Previous: ', event.OldValue.String]);
   disp(['Current: ', event.NewValue.String]);
   disp('------------------');
   updatePlots();
end

handles.DRradio = gobjects(numel(handles.info.DRTypes_));
xRB = 5;
yRB = 8;
for iDR=1:numel(handles.info.DRTypes_)
    handles.DRradio(iDR) = uicontrol(...
        'Parent',handles.DRType,...
        'Units','pixels',...
        'String',handles.info.DRTypes_{iDR},...
        'Style','radiobutton',...
        'Position',[xRB yRB 55 15],...
        'Tag',[handles.info.DRTypes_{iDR} '_rbutton']);
        yRB = yRB + 17;
end

set(handles.DRradio(1), 'Value', 1);

%-------------------------------------------------------------------------------
% Cell Label Menus 
%-------------------------------------------------------------------------------

handles.cellLabel = uicontrol(...
'Parent',handles.LabelA,...
'String',handles.info.labelTypes,...
'Style','popupmenu',...
'Value',1,...
'Position',[10 257 89 22],...
'Callback',@updateLabel,...
'Tag','cellLabelTypeselect');

handles.custClass = uicontrol(...
'Parent',handles.LabelA,...
'String',handles.info.CustomTypes, ...
'Style','popupmenu', ...
'Value',1 ,...
'Position',[103 257 89 22],...
'Callback',@updateLabel,...
'Visible', 'off', ...
'Tag','cellLabelTypeselect');


function updateLabel(source, ~)
   val = source.Value;
   maps = source.String;
   disp(['Updating Labels to : ', maps{val}]);
   disp('------------------');
   if strcmp(maps{val}, 'custom')
       set(handles.custClass, 'Visible', 'on');
   else
       set(handles.custClass, 'Visible', 'off');
   end
   updatePlots();
end


% Manual Label Legend
opts = {'Parent', handles.LabelA, 'Units', 'pixels', 'Position', [11 161 33 83],...
        'Box' 'off','Color',[1 1 1],'XTick',[],'YTick',[]};
axLegend = axes(opts{:});
handles.axLegend = axLegend;
axLegend.XColor = 'w';
axLegend.YColor = 'w';
% set(handles.axLegend, 'Visible', 'on', 'YAxisLocation', 'right', 'XTick', [],...
%     'YTick', 1:8, 'YTickLabel', xlabels, 'TickLength', [0 0]);
set(handles.axLegend, 'Visible', 'off');

handles.dtOnOff = uicontrol(...
'Parent',handles.LabelA,...
'FontUnits','pixels',...
'Units', 'pixels', ...
'String','Show DataTips',...
'Style','checkbox',...
'Position',[14 137 133 17],...
'Callback',@updateDT,...
'Tag','checkbox1',...
'FontSize',12, ...
'Value', 1);

    function updateDT(source, ~)
       val = source.Value;
       disp(['Updating DataTips on/off: ', {val}]);
       disp('------------------');
       if val == 0
          set(handles.dcm_obj,'Enable','off');
       else
          set(dcm_obj,'DisplayStyle','window',...
          'SnapToDataVertex','off','Enable','on');    
       end
        updatePlots();
    end
%===============================================================================
% Data Label Tips / Custom Info
%===============================================================================

widthCellInfo = 130;
xposLabels = widthCellInfo/2;
LabelH = 13;
gapL = 3;
widthString = 55;
handles.cellInfo = uipanel(...
'Parent',handles.mainP,...
'FontUnits','pixels',...
'Units','pixels',...
'Title','Cell Info',...
'Tag','CellInfopanel',...
'Position',[handles.h_movie.Position(3)+handles.h_movie.Position(1)+gapSize, handles.h_movie.Position(2),...
widthCellInfo, numel(handles.info.labelTypes)*25+50],...
'FontSize',13);



% Index Info Update
ih = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'HorizontalAlignment','left',...
'Units','pixels',...
'String','Index:',...
'Style','text',...
'Position',[5, 30, widthString, LabelH],...
'Tag','text8',...
'FontSize',10);

handles.info.cIndex = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String',{'-'},...
'Style','text',...
'Position',[ih.Position(1)+ih.Position(3)+2, ih.Position(2), widthString, LabelH],...
'Tag','IndexString',...
'FontSize',10,...
'FontWeight','bold');

% TumorType Update
ih = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String','TumorType:',...
'Style','text',...
'Position',[ih.Position(1), ih.Position(2)+LabelH+1, widthString, 13],...
'FontSize',10,...
'Tag','text10');

handles.info.TumorTypeLabel_ = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String',{'-T'},...
'Style','text',...
'Position',[ih.Position(1)+ih.Position(3)+2, ih.Position(2), widthString, LabelH],...
'Tag','TumorTypeText',...
'FontSize',10,...
'FontWeight','bold');

% CellType Update
ih = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String','CellType:',...
'Style','text',...
'Position',[ih.Position(1), ih.Position(2)+LabelH+1, widthString, 13],...
'Tag','text12',...
'FontSize',10);

handles.info.CellTypeLabel_ = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String',{'-'},...
'Style','text',...
'Position',[ih.Position(1)+ih.Position(3)+2, ih.Position(2), widthString, LabelH],...
'Tag','CellTypeText',...
'FontSize',10,...
'FontWeight','bold');

% Experiment Date Update
ih = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String','ExprDate:',...
'Style','text',...
'Position',[ih.Position(1), ih.Position(2)+LabelH+1, widthString, 13],...
'Tag','text14',...
'FontSize',10);

handles.info.ExpDateLabel_ = uicontrol(...
'Parent',handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String',{'01-17-2017'},...
'Style','text',...
'Position',[ih.Position(1)+ih.Position(3)+2, ih.Position(2), widthString, LabelH],...
'Tag','ExpDateText',...
'FontSize',10,...
'FontWeight','bold');
% 
% h62 = uicontrol(...
% 'Parent',handles.cellInfo,...
% 'FontUnits','pixels',...
% 'Units','pixels',...
% 'Position',[14 54 63 13],...
% 'HorizontalAlignment','right',...
% 'String','Custom:',...
% 'Style','text',...
% 'Tag','text16',...
% 'FontSize',10);
% 
% handles.info.customLabel_ = uicontrol(...
% 'Parent',handles.cellInfo,...
% 'FontUnits','pixels',...
% 'Units','pixel',...
% 'HorizontalAlignment','left',...
% 'String',{'-'},...
% 'Style','text',...
% 'Position',[xposLabels+5 54 80 13],...
% 'Tag','CustomText',...
% 'FontWeight','bold',...
% 'FontSize',10);

h64 = uicontrol(...
'Parent', handles.cellInfo,...
'FontUnits','pixels',...
'Units','pixels',...
'String','PlayMovie',...
'Position',[5 5 70 21],...
'Tag','PlayMovei',...
'FontSize',12, ...
'Callback', @playMovie);


%===============================================================================
% % ----- FIlter population 
%===============================================================================


% Filter type
% [Standard Filters]
handles.filters.tumorTypeName = uicontrol(...
'Parent',handles.DataSel,...
'FontUnits','pixels',...
'Units','pixels',...
'String',TumorTypeLabels,...
'Style','popupmenu',...
'Value',1, ...
'Position',[10 handles.DataSel.Position(4)-45 85 22],...
'Callback',@updateFilter,...
'Tag','popupmenu2');

handles.filterTextT = uicontrol(...
'Parent',handles.DataSel,...
'FontUnits','pixels',...
'String','TumorType',...
'HorizontalAlignment','left',...
'Style','text',...
'Position',[handles.filters.tumorTypeName.Position(1)+handles.filters.tumorTypeName.Position(3)+2, handles.filters.tumorTypeName.Position(2)+7, 65, 13],...
'Tag','text4',...
'FontSize', 11);

[x, y, w, h] = getPosH(handles.filterTextT);

% CellType Filter
handles.filtersTextC = uicontrol(...
'Parent',handles.DataSel,...
'FontUnits','pixels',...
'Units','pixels',...
'String','CellType',...
'HorizontalAlignment','left',...
'Style','text',...
'Position',[x y-20 65 13],...
'Tag','CellTypeText',...
'FontSize',11);

[x, y, w, h] = getPosH(handles.filterTextT);

handles.filters.cellType = uicontrol(...
'Parent',handles.DataSel,...
'FontUnits','pixels',...
'Units','pixels',...
'String',cellTypes,...
'Style','popupmenu',...
'Value',1, ...
'Position',[x 75.8 85 22],...
'Callback',@updateFilter,...
'Tag','popupmenu2');

function updateFilter(source, ~)
   val = source.Value;
   maps = source.String;
   disp(['Updating Labels to : ', maps{val}]);
   disp('------------------');
   updatePlots();
end

% ----------------
% Manual Select Filter
% ----------------

handles.manualSelText = uicontrol(...
'Parent',handles.DataSel,...
'FontUnits','pixels',...
'Units','pixels',...
'HorizontalAlignment','left',...
'String','Select Cell Index',...
'Style','text',...
'Position',[handles.DataSel.Position(3)-82, 20, 80, 13],...
'Tag','textManualIndexCellSelect',...
'FontSize',10);

handles.manualSel = uicontrol(...
'Parent',handles.DataSel,...
'FontUnits','pixels',...
'Units','pixels',...
'String',arrayfun(@(x) num2str(x), 1:length(data.meta.mindex), 'UniformOutput',false), ...
'Style','popupmenu',...
'Value',1,...
'Callback',@updateManSel,...
'Position',[handles.DataSel.Position(3)-82 5 78 15],...
'Tag','ManualIndexCellSelect',...
'FontSize',10.667);

function updateManSel(source, ~)
   val = source.Value;
   maps = source.String;
   disp(['Updating manSelect to : ', maps{val}]);
   disp(['Updating manSelect to : ', num2str(val)]);
   disp('------------------');
   handles.selPtIdx = val;
   updatePlots();
   playMovie();
end


%===============================================================================
% Set up movie display
%===============================================================================

%-------------------------------------------------------------------------------
% Movie Panel 
%-------------------------------------------------------------------------------
opts = {'Parent', handles.h_movie, 'Units', 'pixels', 'Position',[18.2 36.6 275.6 206.8],...
    'Color',[1 1 1],'Box' 'off', 'XTick',[],'YTick',[]};
axMovie = axes(opts{:});
axMovie.XColor = 'w';
axMovie.YColor = 'w';
handles.axMovie = axMovie;
handles.movies.fidx = 1; % frame index

%-------------------------------------------------------------------------------
% Movie Display 
%-------------------------------------------------------------------------------
% initialize Movie
imagesc(data.movies{1}(:,:,1), 'Parent', handles.axMovie, 'HitTest', 'off');
set(handles.axMovie, 'XTick', []);
set(handles.axMovie, 'YTick', []);
colormap(handles.axMovie, gray);


% Track slider
if ~isempty(data.movies)
    nf = size(data.movies{1},3);
else
    warning('No moview provided');
    nf = 10; % number of frames
end

handles.movies.nf = nf;

fidx = 1; % current frame
handles.frameSlider = uicontrol(handles.h_movie, 'Style', 'slider', 'Units', 'pixels',...
        'Value', fidx, 'Min', 1, 'Max', nf,'SliderStep', [1/(nf-1) 0.5], ...
        'Position',[8.2 11 289.6 14],'Callback', @frameSliderRelease_Callback);   
axMovie.Color = [1 1 1];

addlistener(handles.frameSlider, 'Value', 'PostSet', @frameSlider_Callback);

    function frameSliderRelease_Callback(source, ~)
        val = source.Value;
        handles.movies.fidx = round(val);
        updateMovie();
    end

    function frameSlider_Callback(~, eventdata)
        fidx_ = round(eventdata.AffectedObject.Value);
        handles.movies.fidx = round(fidx_);
        updateMovie();
    end

    function playMovie(varargin)
        nf = handles.movies.nf;
        tidx = handles.selPtIdx;
        i = 1;
        while (i <= nf) && (handles.selPtIdx == tidx)
            handles.movies.fidx = i;
            updateMovie();
            pause(.05);
            i=i+1;
        end
    end

    function updateMovie()
        if ~isempty(data.movies)
            imagesc(data.movies{handles.selPtIdx}(:,:,handles.movies.fidx),...
                    'Parent', handles.axMovie, 'HitTest', 'off');
            set(handles.axMovie, 'XTick', []);
            set(handles.axMovie, 'YTick', []);
            colormap(handles.axMovie, gray);
        end
    end
%===============================================================================
% Set up DR viz axes
%===============================================================================

opts = {'Parent', handles.h2_DR, 'Units', 'pixels',...
    'Position',[15 15 handles.h2_DR.Position(3)-30 handles.h2_DR.Position(4)-65],'Color',[1 1 1],...
    'XTick',[],'YTick',[]};
axDR = axes(opts{:});
handles.axDR = axDR;

% grid off;
% Defaults
handles.selPtIdx = 1;

dcm_obj = datacursormode(handles.h1);
handles.dcm_obj = dcm_obj;
set(dcm_obj,'DisplayStyle','window',...
'SnapToDataVertex','off','Enable','on');
set(dcm_obj,'UpdateFcn',@myupdatefcn);

% plot everything
plotScatter;


%===============================================================================
% Generate Scatter Plot
%===============================================================================

function plotScatter
   
    % -----------------
    % Select Lableling
    % -----------------
    
    labeltype = handles.cellLabel.String{handles.cellLabel.Value};

    if strcmp(labeltype, 'custom') 
        custClass_ = handles.custClass.String{handles.custClass.Value};
        plabel = data.meta.class.custom.(custClass_);
    elseif ismember(labeltype, fieldnames(data.meta.class))
        classType_ = handles.cellLabel.String{handles.cellLabel.Value};
        plabel = data.meta.class.(classType_);
    else
        error('Class label not found');
    end
    
    % Generate Manual Legend
    [GG, GN, ~]= grp2idx(plabel);
    lcmap = cell2mat(getColors(unique(GG)));
    xlabels = GN;
    imagesc(reshape(lcmap, [size(lcmap,1) 1 3]), 'Parent', handles.axLegend);
    set(handles.axLegend, 'Visible', 'on', 'YAxisLocation', 'right', 'XTick', [],...
    'YTick', 1:8, 'YTickLabel', xlabels, 'TickLength', [0 0]);
    set(handles.axLegend, 'Visible', 'on');

    % get labels for plot
    clabels = grp2idx(plabel);
    clabels = cell2mat(getColors(clabels));
    sizeL= repmat(12,length(plabel),1);

    ji = handles.selPtIdx;
    handles.manualSel.Value = ji;  
    if handles.dtOnOff.Value == 0
        clabels(ji,:) = [0 1 1]; %[1 0 .5];
        sizeL(ji,1) = 100;
    end
    
    % ------------------------
    % Filter SubSet Data
    % ------------------------

    idx_f = applyFilters(handles.filters);
    handles.dataI = data.meta.mindex(idx_f);
    
    % ------------------------
    % Select DR Visualization
    % ------------------------
    
    DR_ = {handles.DRType.Children.String};
    DRtype_sel = DR_{logical([handles.DRType.Children.Value])};
    
    xyDR = data.DR.(DRtype_sel);
    X = xyDR(:,1);
    Y = xyDR(:,2);
    
    handles.dataX = X(idx_f);
    handles.dataY = Y(idx_f);
    figure(handles.h1);
    scatter(axDR, X(idx_f), Y(idx_f), sizeL(idx_f), clabels(idx_f,:,:),'filled',...
        'ButtonDownFcn', @axDRCallback);
    set(axDR,'Color',[1 1 1],'Box', 'off', 'XTick',[],'YTick',[]);
    axDR.Title.String = DRtype_sel;
           
%            
%     switch DRtype_sel
%        case 'PCA'
%            handles.dataX = data.PCA(idx_f,1);
%            handles.dataY = data.PCA(idx_f,2);
%            figure(handles.h1);
%            scatter(axDR, data.PCA(idx_f,1), data.PCA(idx_f,2), sizeL(idx_f), clabels(idx_f,:,:),'filled','ButtonDownFcn', @axDRCallback);
%            set(axDR,'Color',[1 1 1],'Box', 'off', 'XTick',[],'YTick',[]);
%            axDR.Title.String = 'PCA';           
%        case 'tSNE'           
%            handles.dataX = data.tSNE(idx_f,1);
%            handles.dataY = data.tSNE(idx_f,2);
%            figure(handles.h1);
%            scatter(axDR, data.tSNE(idx_f,1), data.tSNE(idx_f,2), sizeL(idx_f), clabels(idx_f,:,:), 'filled', 'ButtonDownFcn', @axDRCallback);
%            axDR.Title.String = 'tSNE';
%         otherwise
%     end
    
    axDR.XColor = 'w';
    axDR.YColor = 'w';
    set(axDR,'Color',[1 1 1],'Box', 'off', 'XTick',[],'YTick',[]);
end


    
    
%===============================================================================
% Helper functions
%===============================================================================   

    function updateAnnotations()
    
        set(handles.annotate, 'String', handles.info.Annotations{handles.selPtIdx});

        % ------------
        % update Cell Info Panel
        handles.info.cIndex.String = num2str(handles.selPtIdx);
        handles.info.TumorTypeLabel_.String = data.meta.tumorTypeName{handles.selPtIdx};
        handles.info.CellTypeLabel_.String = data.meta.cellType{handles.selPtIdx}; 
        handles.info.ExpDateLabel_.String = '11-11-2017';
        handles.info.customLabel_.String = 'cust.';
        
        % ------------        

        % Update Custom Label Panel
        updateCustomPanel
    
    end
    

    function updateCustomPanel()
    
        
    end
    
    function updatePlots
        updateAnnotations();
        plotScatter;
    end
    
   
    function txt = myupdatefcn(empt, objs)
        % Customizes text of data tips
        idx = empt.Cursor.DataIndex;
        handles.selPtIdx = handles.dataI(idx);
%         txt = {['Index: ',num2str(handles.selPtIdx)],...
%                ['CellType: ',data.meta.cellType{handles.selPtIdx}],...
%                ['TumorType: ',data.meta.tumorTypeName{handles.selPtIdx}], ...
%                ['ExprDate :', '01-17-2017']};
        txt = {['xDR: ' num2str(objs.Position(1))],...
               ['yDR: ' num2str(objs.Position(2))]};

        set(handles.manualSel, 'Value', handles.selPtIdx);
        updateAnnotations;
        playMovie();
%         alldatacursors = findall(handles.h1,'type','hggroup');
%         set(alldatacursors,'FontSize', 4);
%         set(alldatacursors,'FontName','Times');
    end

    function axDRCallback(varargin)
%         a = get(gca, 'CurrentPoint');
        ipt = varargin{2}.IntersectionPoint;
        x0 = ipt(1,1);
        y0 = ipt(1,2);
        fx = find(round(varargin{1}.XData, 5) == round(x0,5));
        fy = find(round(varargin{1}.YData, 5) == round(y0,5));
        idx = intersect(fx,fy);
        handles.selPtIdx = handles.dataI(idx);
        if length(handles.selPtIdx) > 1
            handles.selPtIdx = handles.selPtIdx(1);
        end
     
        plotScatter; 
        updateAnnotations;
        playMovie;        

    end



    function [idx_out] = applyFilters(hinff)

        fc = fieldnames(hinff);
        idx_out = 1:length(data.meta.mindex);
        idx_out = idx_out';

        for i = 1:length(fc)

            th = hinff.(fc{i});
            maps = th.String;  
            val = th.Value;  

            if strcmp(maps{val}, 'All')
               disp('selecting -- all');
               idx_t = 1:length(data.meta.mindex);
               idx_t = idx_t';
            else
               idx_t = find(cellfun(@(x) strcmp(x, maps{val}), data.meta.(fc{i}))); 
               disp(['sub-selecting ' maps{val}]);
            end
            idx_out = intersect(idx_out, idx_t);
        end
    end


    function [RGBmat] = getColors(clabels)
       col = colorset{:}; 
       RGBmat = arrayfun(@(x) let2RGB(col(x)), clabels, 'Uniform', false);
    end

    function [rgbvec] = let2RGB(ltr)
        switch(lower(ltr))
            case 'r'
                rgbvec = [1 0 0];
            case 'g'
                rgbvec = [0 1 0];
            case 'b'
                rgbvec = [0 0 1];
            case 'c'
                rgbvec = [0 1 1];
            case 'm'
                rgbvec = [1 0 1];
            case 'y'
                rgbvec = [1 1 0];
            case 'w'
                rgbvec = [1 1 1];
            case 'k'
                rgbvec = [0 0 0];
            otherwise
                disp('Warning;!--colors mismatch');
        end    
    end
end

    function [x, y, w, h]=getPosH(Hin)
       x = Hin.Position(1);
       y = Hin.Position(2);
       w = Hin.Position(3); 
       h = Hin.Position(3); 
    end


