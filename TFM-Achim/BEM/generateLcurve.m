function [residuals_u norm_f]=generateLcurve(M,sol_mats,u_M,forceMesh,varargin)
% INPUT:
% M         : M is either the fwd Map, or a force field contain all
%             information needed for the remaining inputs except factor.
%             The L-curve will be plot ONLY FOR THE FIRST FRAME. Execute
%             for e.g. plotLcurve(forceField(5)) to plot it for the 5th
%             frame.
% sol_mats  : structure that contains the matrices that are need to
%             reconstruct the solutions. sol_mats has to be in the form
%             that is understood by the function calcSolFromSolMatsFastBEM.
% u_M       : displacement information for which M has been build up.
% forceMesh : contains the force mesh for which M has been calculated.
% factor    : the refinement factor. The higher factor the finer the plot will
%             be.
% Adapted from plotLcurve

% Sebastien Besson, Sep 2011

% display('This is correct only for meshes with a single basis class!');
% display('In the general case one has to substitute: f_rec=sol_coef * vol');

% Input check
ip= inputParser;
ip.addRequired('M',@isnumeric);
ip.addRequired('sol_mats',@isstruct);
ip.addRequired('u_M',@isnumeric);
ip.addRequired('forceMesh',@isstruct);
ip.addOptional('factor',10,@isscalar);
ip.addParamValue('wtBar',-1,@isscalar);
ip.parse(M,sol_mats,u_M,forceMesh,varargin{:})
factor=ip.Results.factor;
wtBar=ip.Results.wtBar;

% Initiate regularization parameter range
lowerLim=-15;
upperLim=0;
numPoints=factor*(upperLim-lowerLim)+1;
L=logspace(lowerLim,upperLim,numPoints);
L=[0 L Inf];

% Initialize output
residuals_u=zeros(numPoints,1);
norm_f=zeros(numPoints,1);

% Create waitbar if applicable (waitbar delegation or graphic session)
logMsg = 'Please wait, calculating L-curve';
timeMsg = @(t) ['\nEstimated time remaining: ' num2str(round(t/60)) 'min'];
tic;
if ishandle(wtBar),
    waitbar(0,wtBar,logMsg);
elseif feature('ShowFigureWindows')
    wtBar = waitbar(0,logMsg);
end

for j=1:length(L)
    textMess=['Calculate: ',num2str(numel(L)),' values for regularization parameter'];
    progressText(j/numel(L),textMess);
    
    regParam=L(j);
    [~,~,sol_coef]=calcSolFromSolMatsFastBEM(M,sol_mats,u_M,forceMesh,regParam,[],[]);
    u_rec=M*sol_coef;
    
    % basis functions with a larger support have to be weighted more!
    [normWeights]=getNormWeights(forceMesh);
    eyeWeights =diag(normWeights);    
    f_rec=eyeWeights*sol_coef;

    residuals_u(j)=sum((u_M-u_rec).^2);
    norm_f(j)=sum((f_rec).^2);
    
    if mod(j,5)==1 && ishandle(wtBar)
        tj=toc;
        waitbar(j/numel(L),wtBar,sprintf([logMsg timeMsg(tj*numel(L)/j-tj)]));
    end
end

% Close waitbar if generated by the function
if ishandle(wtBar) && ~ishandle(ip.Results.wtBar)
    close(wtBar);
end