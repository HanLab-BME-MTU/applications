function [pos_f,force]=FEM_TFM(E,v,displField,grid_mat,iu_mat,i_max,j_max)
%reg_FEM_TFM performs FEA using material properties and substrate geometry 
%coupled with measured displacement field to produce estimated force field
%for the given substrate deformation.
%
%   Inputs:
%       E = Young's Modulus of substrate
%       v = Poisson's Ratio of substrate
%       grid_mat = grid of points associated with the displacements in iu_mat
%       iu_mat = matrix of displacement magnitudes
%
%   Outputs:
%       pos_f = nodal locations
%       force = estimated force at corresonding nodal locations

% //Generate model container **********************************************
structModel=createpde('structural','static-solid');

% //Define geometry *******************************************************
%reduce to micron size geometry, 72 nm/pix
%w = length(grid_mat(:,1));
w = 198;
gm=multicuboid(w,w,15);
structModel.Geometry=gm;

% //Specify material properties *******************************************
structuralProperties(structModel,'YoungsModulus',E,'PoissonsRatio',v);

% //Apply fixed BC on bottom face *****************************************
structuralBC(structModel,'Face',1,'Constraint','fixed');

% //Apply displacement field on top face **********************************
% xLoc = grid_mat(:,:,1);
% yLoc = grid_mat(:,:,2);
% disp_x = iu_mat(:,:,1);
% disp_y = iu_mat(:,:,2);
% 
% dispInterpX=griddedInterpolant(xLoc,yLoc,disp_x);
% dispInterpY=griddedInterpolant(xLoc,yLoc,disp_y);
% dispInterpZ=griddedInterpolant(xLoc,yLoc,zeros(198,198));
% 
% %define function handle
% hydrogelDisp = @(location,state)[dispInterpX(location.x,location.y); ...
%                                  dispInterpY(location.x,location.y); ...
%                                  dispInterpZ(location.x,location.y);];
%                                  
% %pass function handle and define BCs
% structuralBC(structModel,'Face',2,'Displacement',hydrogelDisp,'Vectorize','on');

% //Generate mesh for model ***********************************************
%may need to input mesh generated by createMeshAndBasisFastBEM
xLoc = grid_mat(:,:,1);
yLoc = grid_mat(:,:,2);
[forceMesh]=createMeshAndBasisFastBEM(xLoc,yLoc,false,[],0);
generateMesh(structModel,'Hmax',10); %need to use hexahedral elements

%identify individual nodes
%fetch basis function for current node
%load mesh using basis function at current node
%solve pde 
%identify displacement vector for each bead location
%store displacement vector into 1 column of forward map matrix

% //Solving structural model **********************************************
structModelResults=solve(structModel);

% //Visualizing results ***************************************************
figure(2)
pdeplot3D(structModel,'ColorMapData',structModelResults.VonMisesStress, ...
    'Deformation',structModelResults.Displacement)

% //Outputting force and position
pos_f(:,1) = reshape(grid_mat(:,:,1),i_max*j_max,1);
pos_f(:,2) = reshape(grid_mat(:,:,2),i_max*j_max,1);
%structModelResults stress and strain - nNodes x 1;
ind = structModel.Mesh.Nodes(3,:) == 0;
%surfaceNodes(:,:) = structModel.Mesh.Nodes(:,ind)';
%surfaceStressXX(:) = structModelResults.Stress.xx(ind)';
%surfaceStressYY(:) = structModelResults.Stress.yy(ind)';
force(:,1) = structModelResults.Stress.xz(ind)';
force(:,2) = structModelResults.Stress.yz(ind)';
end