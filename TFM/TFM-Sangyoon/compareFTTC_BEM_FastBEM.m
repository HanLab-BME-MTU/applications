%% compareFTTC_BEM_FastBEM
function [] = compareFTTC_BEM_FastBEM(forceType,percentNoise,savePath,forceMesh,forceMeshFastBEM,M,M_FastBEM,basisClassTablePath)
% compareFTTC_BEM_FastBEM(forceType,percentNoise,savePath,forceMesh,M,M_FastBEM)
% This function compares the accuracy and performance of each force
% reconstruction technique using artificially given displacment with given
% noise level.
% example: compareFTTC_BEM_FastBEM('groupForce',1,
% '/home/sh268/orchestra/home/Documents/TFM-simulation/n1s',forceMesh,forceMeshFastBEM,M,M_FastBEM,
% '/home/sh268/orchestra/home/Documents/TFM-simulation/basisFunction5050.mat')
% % n1s means noise= 1 percent and s = smooth

% input:
%       forceType:      path to the folder
%       percentNoise:   sec/frame
%       savePath:       image resolution, nm/pixel
%       forceMesh:      forceMesh
%       forceMeshFastBEM
%       M:              path and name of myosin image 
%       M_FastBEM:      total frame number
%       basisClassTablePath:     path to basisClassTable
% output:
%       images of forces (.fig and .tif):  stored in './img/'
%                   force maps, displacement field, x-sectional profile
%       data:       regularization parameter for each force method
%                   mean square deviation, peak force underestimation
%                   M and M_FastBEM
%                   stored in './data/'
% Sangyoon Han March 2013

%% parameter setup
E=8000;  %Young's modulus, unit: Pa
addNoise=1;
% percentNoise=1/200;
% savePath = 'xy0150fastBEM_10pNoise.mat';

s=0.5;  %Poisson's ratio, only needed for FTTC

meshPtsFwdSol=2^10;
% L=0;
numPoints_u=50;       %(must be even number)
% numPoints_out=50;

xmin =1;
xmax =50;
ymin =1;
ymax =50;
%% Mesh generation and artificial force generation
[x_mat_u, y_mat_u]=meshgrid(linspace(xmin,xmax,numPoints_u) , linspace(ymin,ymax,numPoints_u));
x_vec_u=reshape(x_mat_u,[],1);
y_vec_u=reshape(y_mat_u,[],1);

% % I need force distribution with multiple sources, unit: kPa -Sangyoon 013113
% force_x1 = assumedForceShifted(1,x_mat_u,y_mat_u,10,10,1,-0.1,forceType);
% force_y1 = assumedForceShifted(2,x_mat_u,y_mat_u,10,10,1,-0.1,forceType);
% force_x2 = assumedForceShifted(1,x_mat_u,y_mat_u,15,25,.8,-.4,forceType);
% force_y2 = assumedForceShifted(2,x_mat_u,y_mat_u,15,25,.8,-.4,forceType);
% force_x3 = assumedForceShifted(1,x_mat_u,y_mat_u,25,34,.6,-.7,forceType);
% force_y3 = assumedForceShifted(2,x_mat_u,y_mat_u,25,34,.6,-.7,forceType);
% force_x4 = assumedForceShifted(1,x_mat_u,y_mat_u,37,45,.3,-.8,forceType);
% force_y4 = assumedForceShifted(2,x_mat_u,y_mat_u,37,45,.3,-.8,forceType);
% force_x5 = assumedForceShifted(1,x_mat_u,y_mat_u,22,15,2,-.3,forceType);
% force_y5 = assumedForceShifted(2,x_mat_u,y_mat_u,22,15,2,-.3,forceType);
% force_x6 = assumedForceShifted(1,x_mat_u,y_mat_u,31,27,1.8,-.5,forceType);
% force_y6 = assumedForceShifted(2,x_mat_u,y_mat_u,31,27,1.8,-.5,forceType);
% force_x7 = assumedForceShifted(1,x_mat_u,y_mat_u,41,38,.6,-1.5,forceType);
% force_y7 = assumedForceShifted(2,x_mat_u,y_mat_u,41,38,.6,-1.5,forceType);
% force_x8 = assumedForceShifted(1,x_mat_u,y_mat_u,38,8,-1.2,.3,forceType);
% force_y8 = assumedForceShifted(2,x_mat_u,y_mat_u,38,8,-1.2,.3,forceType);
% force_x9 = assumedForceShifted(1,x_mat_u,y_mat_u,42,18,-.6,.8,forceType);
% force_y9 = assumedForceShifted(2,x_mat_u,y_mat_u,42,18,-.6,.8,forceType);
% 2nd force composition
%% force pickup
% % temporary - get the coordinates
% figure, imshow(ones(50))
% hold on
% fposxy = [];
% n = 0;
% % Loop, picking up the points.
% disp('Left mouse button picks points.')
% disp('Right mouse button picks last point.')
% but = 1;
% while but == 1
%     [xi,yi,but] = ginput(1);
%     plot(xi,yi,'ro')
%     n = n+1;
%     text(xi,yi-8,num2str(n));
%     fposxy(n,:) = [xi yi];
% end
% hold off
%% force
force_x = assumedForceAniso2D(1,x_mat_u,y_mat_u,48/10,475/10,450,10,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,55/10,432/10,760,60,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,59/10,383/10,600,70,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,71/10,319/10,540,90,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,79/10,271/10,930,220,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,98/10,192/10,620,495,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,111/10,152/10,560,440,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,136/10,90/10,480,600,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,163/10,79/10,450,660,500/300,700/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,234/10,65/10,390,480,500/300,700/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,265/10,74/10,340,540,500/300,500/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,335/10,65/10,280,800,550/300,700/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,415/10,55/10,170,840,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,465/10,55/10,90,980,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,165/10,460/10,1260,60,500/300,2300/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,176/10,401/10,1180,100,450/300,2100/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,199/10,328/10,1100,320,700/300,3000/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,232/10,235/10,800,700,600/300,2600/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,353/10,205/10,300,1200,700/300,3500/300,forceType)+...
    assumedForceAniso2D(1,x_mat_u,y_mat_u,426/10,202/10,200,1100,700/300,3000/300,forceType);
force_y = assumedForceAniso2D(2,x_mat_u,y_mat_u,48/10,475/10,450,10,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,55/10,432/10,760,60,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,59/10,383/10,600,70,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,71/10,319/10,540,90,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,79/10,271/10,930,220,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,98/10,192/10,620,495,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,111/10,152/10,560,440,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,136/10,90/10,480,600,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,163/10,79/10,450,660,500/300,700/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,234/10,65/10,390,480,500/300,700/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,270/10,64/10,340,540,500/300,500/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,338/10,61/10,280,800,550/300,700/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,410/10,55/10,170,840,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,460/10,54/10,90,980,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,165/10,460/10,1260,60,500/300,2300/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,176/10,401/10,1180,100,450/300,2100/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,199/10,328/10,1100,320,700/300,3000/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,232/10,235/10,800,700,600/300,2600/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,353/10,205/10,300,1200,700/300,3500/300,forceType)+...
    assumedForceAniso2D(2,x_mat_u,y_mat_u,426/10,202/10,200,1100,700/300,3000/300,forceType);
% force_x = force_x1+force_x2+force_x3+force_x4+force_x5+force_x6+force_x7+force_x8+force_x9;
% force_y = force_y1+force_y2+force_y3+force_y4+force_y5+force_y6+force_y7+force_y8+force_y9;
% h1 = figure(1);
% quiver(x_mat_u,y_mat_u,force_x,force_y,0); hold on
% quiver(0.5,0.5,1,0,0,'k','LineWidth',2); % scale = 1 kPa
generateHeatmapFromGridData(x_mat_u,y_mat_u,force_x,force_y,[savePath filesep 'original force']);

%% Forward solution
[ux, uy]=fwdSolution(x_mat_u,y_mat_u,E,xmin,xmax,ymin,ymax,...
    @(x,y) assumedForceAniso2D(1,x,y,48/10,475/10,450,10,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x,y,55/10,432/10,760,60,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x,y,59/10,383/10,600,70,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x,y,71/10,319/10,540,90,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x,y,79/10,271/10,930,220,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x,y,98/10,192/10,620,495,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x,y,111/10,152/10,560,440,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x,y,136/10,90/10,480,600,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x,y,163/10,79/10,450,660,500/300,700/300,forceType)+...
    assumedForceAniso2D(1,x,y,234/10,65/10,390,480,500/300,700/300,forceType)+...
    assumedForceAniso2D(1,x,y,265/10,74/10,340,540,500/300,500/300,forceType)+...
    assumedForceAniso2D(1,x,y,335/10,65/10,280,800,550/300,700/300,forceType)+...
    assumedForceAniso2D(1,x,y,415/10,55/10,170,840,500/300,600/300,forceType)+...
    assumedForceAniso2D(1,x,y,465/10,55/10,90,980,400/300,500/300,forceType)+...
    assumedForceAniso2D(1,x,y,165/10,460/10,1260,60,500/300,2300/300,forceType)+...
    assumedForceAniso2D(1,x,y,176/10,401/10,1180,100,450/300,2100/300,forceType)+...
    assumedForceAniso2D(1,x,y,199/10,328/10,1100,320,700/300,3000/300,forceType)+...
    assumedForceAniso2D(1,x,y,232/10,235/10,800,700,600/300,2600/300,forceType)+...
    assumedForceAniso2D(1,x,y,353/10,205/10,300,1200,700/300,3500/300,forceType)+...
    assumedForceAniso2D(1,x,y,426/10,202/10,200,1100,700/300,3000/300,forceType),...
    @(x,y) assumedForceAniso2D(2,x,y,48/10,475/10,450,10,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x,y,55/10,432/10,760,60,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x,y,59/10,383/10,600,70,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x,y,71/10,319/10,540,90,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x,y,79/10,271/10,930,220,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x,y,98/10,192/10,620,495,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x,y,111/10,152/10,560,440,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x,y,136/10,90/10,480,600,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x,y,163/10,79/10,450,660,500/300,700/300,forceType)+...
    assumedForceAniso2D(2,x,y,234/10,65/10,390,480,500/300,700/300,forceType)+...
    assumedForceAniso2D(2,x,y,265/10,74/10,340,540,500/300,500/300,forceType)+...
    assumedForceAniso2D(2,x,y,335/10,65/10,280,800,550/300,700/300,forceType)+...
    assumedForceAniso2D(2,x,y,415/10,55/10,170,840,500/300,600/300,forceType)+...
    assumedForceAniso2D(2,x,y,465/10,55/10,90,980,400/300,500/300,forceType)+...
    assumedForceAniso2D(2,x,y,165/10,460/10,1260,60,500/300,2300/300,forceType)+...
    assumedForceAniso2D(2,x,y,176/10,401/10,1180,100,450/300,2100/300,forceType)+...
    assumedForceAniso2D(2,x,y,199/10,328/10,1100,320,700/300,3000/300,forceType)+...
    assumedForceAniso2D(2,x,y,232/10,235/10,800,700,600/300,2600/300,forceType)+...
    assumedForceAniso2D(2,x,y,353/10,205/10,300,1200,700/300,3500/300,forceType)+...
    assumedForceAniso2D(2,x,y,426/10,202/10,200,1100,700/300,3000/300,forceType),'fft',[],meshPtsFwdSol); %,'conv',[],meshPtsFwdSol);
% [ux, uy]=fwdSolution(x_mat_u,y_mat_u,E,xmin,xmax,ymin,ymax,...
%     @(x,y) assumedForceShifted(1,x,y,10,10,1,-0.1,forceType)+...
%     assumedForceShifted(1,x,y,15,25,.8,-.4,forceType)+...
%     assumedForceShifted(1,x,y,25,34,.6,-.7,forceType)+...
%     assumedForceShifted(1,x,y,37,45,.3,-.8,forceType)+...
%     assumedForceShifted(1,x,y,22,15,2,-.3,forceType)+...
%     assumedForceShifted(1,x,y,31,27,1.8,-.5,forceType)+...
%     assumedForceShifted(1,x,y,41,38,.6,-1.5,forceType)+...
%     assumedForceShifted(1,x,y,38,8,-1.2,.3,forceType)+...
%     assumedForceShifted(1,x,y,42,18,-.6,.8,forceType),...
%     @(x,y) assumedForceShifted(2,x,y,10,10,1,-0.1,forceType)+...
%     assumedForceShifted(2,x,y,15,25,.8,-.4,forceType)+...
%     assumedForceShifted(2,x,y,25,34,.6,-.7,forceType)+...
%     assumedForceShifted(2,x,y,37,45,.3,-.8,forceType)+...
%     assumedForceShifted(2,x,y,22,15,2,-.3,forceType)+...
%     assumedForceShifted(2,x,y,31,27,1.8,-.5,forceType)+...
%     assumedForceShifted(2,x,y,41,38,.6,-1.5,forceType)+...
%     assumedForceShifted(2,x,y,38,8,-1.2,.3,forceType)+...
%     assumedForceShifted(2,x,y,42,18,-.6,.8,forceType),'fft',[],meshPtsFwdSol);
% %% finding solution by direct convolution
% [ux,uy]=fwdSolution(x_mat_u,y_mat_u,E,xmin,xmax,ymin,ymax,@(x,y) assumedForceShifted(1,x,y,22,15,2,-.3,forceType),@(x,y) assumedForceShifted(2,x,y,22,15,2,-.3,forceType),'conv',[],meshPtsFwdSol);
generateHeatmapFromGridData(x_mat_u,y_mat_u,ux,uy,[savePath filesep 'original displacement']);
%% addnoise
if addNoise==1
    max_u=max([max(ux(:)) max(uy(:))]); 
    noise_x=normrnd(0,percentNoise*max_u,numPoints_u,numPoints_u);
    noise_y=normrnd(0,percentNoise*max_u,numPoints_u,numPoints_u);
    uxm=ux+noise_x;
    uym=uy+noise_y;
end

u_mat(:,:,1)=uxm;
u_mat(:,:,2)=uym;
ux_vec=reshape(uxm,[],1);
uy_vec=reshape(uym,[],1);
% u=vertcat(ux_vec,uy_vec);

generateHeatmapFromGridData(x_mat_u,y_mat_u,uxm,uym,[savePath filesep 'original displacement with noise']);
%% FTTC-reconstruction with regularization
pix_durch_my=1; %seem to be important only for the energy
grid_mat_u(:,:,1)=x_mat_u;
grid_mat_u(:,:,2)=y_mat_u;
i_max = size(grid_mat_u,1);
j_max = size(grid_mat_u,2);
cluster_size = grid_mat_u(1,1,1) - grid_mat_u(2,2,1);
L = 0.0000005; 

[~,~,force_FTTC, ~] = reg_fourier_TFM(grid_mat_u,u_mat,E,s, pix_durch_my, cluster_size, i_max, j_max, L);  

rec_force_FTTCreg(:,:,1)=reshape(force_FTTC(:,1),i_max,j_max);
rec_force_FTTCreg(:,:,2)=reshape(force_FTTC(:,2),i_max,j_max);
generateHeatmapFromGridData(x_mat_u,y_mat_u,rec_force_FTTCreg(:,:,1),rec_force_FTTCreg(:,:,2),[savePath filesep 'FTTC'],1270);

%% Now BEM reconstruction - meshing
% display(['expected computation time:',num2str(numPoints_u^2*numPoints_f^2*27.6*10^(-3)),'s these are:',num2str(numPoints_u^2*numPoints_f^2*27.6*10^(-3)/3600),'h']);
keepBDPts=true;
doPlot=0;
forceMesh=createMeshAndBasisFastBEM(x_vec_u,y_vec_u,keepBDPts,[],doPlot);
%% L2 0th BEM
tic
L = 1e-6; 
pathL2_0th = [savePath filesep 'L2_0th']; 
lcurvePath = [pathL2_0th filesep 'L-curve'];
mkdir(lcurvePath);

[fx_L2_0th, fy_L2_0th, x_out, y_out, M, ~, ~] = ...
    BEM_force_reconstruction(x_mat_u,y_mat_u,uxm,uym,forceMesh,E,L,[],[],'fast',...
    'meshPtsFwdSol',meshPtsFwdSol,'solMethodBEM','QR','basisClassTblPath',[savePath filesep 'basisClassTbl.mat'],...
    'useLcurve',true,'LcurveDataPath',[lcurvePath filesep 'lcurveData.mat'], ...
    'LcurveFigPath', [lcurvePath filesep 'lcurve.fig'],'LcurveFactor',10, 'imgRows',49,'imgCols',49);
toc

rec_force_L2_0th(:,:,1)=fx_L2_0th;
rec_force_L2_0th(:,:,2)=fy_L2_0th;
generateHeatmapFromGridData(x_out,y_out,rec_force_L2_0th(:,:,1),rec_force_L2_0th(:,:,2),pathL2_0th,1270);

%% L2 2nd BEM
L = 1e-8; % I need to test this parameter.
pathL2_2nd = [savePath filesep 'L2_2nd']; 
lcurvePath = [pathL2_2nd filesep 'L-curve'];
mkdir(lcurvePath);
[fx_L2_2nd, fy_L2_2nd, x_out, y_out, ~, ~, ~] = ...
    BEM_force_reconstruction(x_mat_u,y_mat_u,uxm,uym,forceMesh,E,L, x_out, y_out,'fast',...
    'meshPtsFwdSol',meshPtsFwdSol,'solMethodBEM','LaplacianReg','fwdMap',M,'basisClassTblPath',[savePath filesep 'basisClassTbl.mat'],...
    'useLcurve',true,'LcurveDataPath',[lcurvePath filesep 'lcurveData.mat'], ...
    'LcurveFigPath', [lcurvePath filesep 'lcurve.fig'],'LcurveFactor',10, 'imgRows',49,'imgCols',49);
toc

rec_force_L2_2nd(:,:,1)=fx_L2_2nd;
rec_force_L2_2nd(:,:,2)=fy_L2_2nd;
generateHeatmapFromGridData(x_out,y_out,rec_force_L2_2nd(:,:,1),rec_force_L2_2nd(:,:,2),pathL2_2nd,1270);
%% L1 0th BEM
L = 1e-4; % I need to test this parameter.
pathL1_0th = [savePath filesep 'L1_0th']; 
lcurvePath = [pathL1_0th filesep 'L1_0th'];
mkdir(lcurvePath);
[fx_L1_0th, fy_L1_0th, x_out, y_out, ~, ~, ~] = ...
    BEM_force_reconstruction(x_mat_u,y_mat_u,uxm,uym,forceMesh,E,L, x_out, y_out,'fast',...
    'meshPtsFwdSol',meshPtsFwdSol,'solMethodBEM','1NormReg','fwdMap',M,'basisClassTblPath',[savePath filesep 'basisClassTbl.mat'],...
    'useLcurve',true,'LcurveDataPath',[lcurvePath filesep 'lcurveData.mat'], ...
    'LcurveFigPath', [lcurvePath filesep 'lcurve.fig'],'LcurveFactor',10, 'imgRows',49,'imgCols',49);
toc

rec_force_L1_0th(:,:,1)=fx_L1_0th;
rec_force_L1_0th(:,:,2)=fy_L1_0th;
generateHeatmapFromGridData(x_out,y_out,rec_force_L1_0th(:,:,1),rec_force_L1_0th(:,:,2),pathL1_0th,1270);
%% L1 2nd BEM
L = 1e-5; % I need to test this parameter.
pathL1_2nd = [savePath filesep 'L1_2nd']; 
lcurvePath = [pathL1_2nd filesep 'L1_2nd'];
mkdir(lcurvePath);
[fx_L1_0th, fy_L1_0th, x_out, y_out, ~, ~, ~] = ...
    BEM_force_reconstruction(x_mat_u,y_mat_u,uxm,uym,forceMesh,E,L, x_out, y_out,'fast',...
    'meshPtsFwdSol',meshPtsFwdSol,'solMethodBEM','1NormRegLaplacian','fwdMap',M,'basisClassTblPath',[savePath filesep 'basisClassTbl.mat'],...
    'useLcurve',true,'LcurveDataPath',[lcurvePath filesep 'lcurveData.mat'], ...
    'LcurveFigPath', [lcurvePath filesep 'lcurve.fig'],'LcurveFactor',10, 'imgRows',49,'imgCols',49);
toc

rec_force_L1_2nd(:,:,1)=fx_L1_0th;
rec_force_L1_2nd(:,:,2)=fy_L1_0th;
generateHeatmapFromGridData(x_out,y_out,rec_force_L1_2nd(:,:,1),rec_force_L1_0th(:,:,2),pathL1_2nd,1270);
%% save current
save;
%% Peak underestimation
[maxorg_c,tmax_r] = max(tnorm_org);
[maxorg(1),tmax_c] = max(maxorg_c); % maxorg(1) = tnorm_org(tmax_r(tmax_c),tmax_c)
maxorg(2) = tnorm_fttc(tmax_r(tmax_c),tmax_c);
maxorg(3) = tnorm_fttcreg(tmax_r(tmax_c),tmax_c);
maxorg(4) = tnorm_BEM(tmax_r(tmax_c),tmax_c);
maxorg(5) = tnorm_BEMreg(tmax_r(tmax_c),tmax_c);
maxorg(6) = tnorm_FastBEM(tmax_r(tmax_c),tmax_c);
maxorg(7) = tnorm_FastBEMreg(tmax_r(tmax_c),tmax_c);
maxorg(8) = tnorm_FastBEMregsc(tmax_r(tmax_c),tmax_c);

figure(43); bar(maxorg)
title('Peaks in original, fttc, regularized fttc, BEM, regularized BEM, FastBEM and regularized FastBEM');
% peak is overestimated in FTTC, but underestimated a lot in regularized FTTC.

%% Boundary cutting for FastBEM
tnorm_FastBEM(1,:)=0;
tnorm_FastBEM(:,1)=0;
tnorm_FastBEM(end,:)=0;
tnorm_FastBEM(:,end)=0;

tnorm_FastBEMregsc(1,:)=0;
tnorm_FastBEMregsc(:,1)=0;
tnorm_FastBEMregsc(end,:)=0;
tnorm_FastBEMregsc(:,end)=0;

%% Precision in locating peak force
peakxy_legend = {'      Original     ','        FTTC       ',' Regularized FTTC  ',...
    '        BEM        ','  Regularized BEM  ','     FastBEM       ','Regularized FastBEM','FastBEM Scaled Reg '};
tnorm(:,:,1) = tnorm_org;
tnorm(:,:,2) = tnorm_fttc;
tnorm(:,:,3) = tnorm_fttcreg;
tnorm(:,:,4) = tnorm_BEM;
tnorm(:,:,5) = tnorm_BEMreg;
tnorm(:,:,6) = tnorm_FastBEM;
tnorm(:,:,7) = tnorm_FastBEMreg;
tnorm(:,:,8) = tnorm_FastBEMregsc;
zeroI = [-4 -4]; %index of zero coordinates
disp('         Methods          Peak value   X       Y')
for jj=1:8
    clear tmax
%     str = sprintf('%s has a peak of %0.2f at x = %d, y = %d.', peakxy_legend{jj}, maxInt(jj), max_r(jj),max_c(jj));
    [~,locMaxI,~] = findMaxScoreI(tnorm(:,:,jj),zeroI,3,0.5);
    nPeaks = size(locMaxI,1);
    method = cell(nPeaks,1);
    method(ceil(nPeaks/2)) = peakxy_legend(jj);
    for k=1:nPeaks
        tmax(k,1) = tnorm(locMaxI(k,1),locMaxI(k,2),jj);
    end
    peakinfo = [method num2cell(tmax) num2cell(locMaxI)];
    disp(peakinfo);
end
% We see that BEM as well as FTTC couldn't located the x y position at (10,
% 11), and the values are over-estimated.
%% save
save(savePath);