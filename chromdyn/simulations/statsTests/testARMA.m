%SCRIPT testARMA fits an AMRA model to a trajectory generated by mtGTPCapLDepK or mtDynInstability

totalTime = 2000;
simTimeStep = 0.005;
timeEps = 0.5;
expTimeStep = 1;
aveInterval = 0.6;

% %input to call mtGTPCapLDepK
% initialState = struct('mtLength0',0.44,'capSize0',3,'unitConc',20);
% modelParam = struct('minLength',0.2,'maxLength',1.5,'kTOnTFree',0.45,...
%     'addAmpT',0.3,'addWidT',10,'addLenT',1.1,'kTOff',0.0,'kTOnD',0.2,...
%     'kDOffFree',15,'addAmpD',10,'addWidD',10,'addLenD',0.6,'kHydrolysis',11);
% saveTraj = struct('saveOrNot',0,'fileName',[]);
% %get trajectory using mtGTPCapLDepK
% [mtLength,capSize,errFlag] = mtGTPCapLDepK(modelParam,initialState,...
%     totalTime+expTimeStep,simTimeStep,timeEps,saveTraj);
% if errFlag
%     return;
% end

%input to call mtDynInstability
initialState = struct('mtLength0',0.44,'mtState0',1,'free',1,'unitConc',10);
modelParam = struct('minLength',-10000,'kOnElong',.5,'kOffElong',1,...
    'kOnShrink',.1,'kOffShrink',5);
%get trajectory using mtDynInstability
[mtLength,forcedRescue,errFlag] = mtDynInstability(modelParam,initialState,...
    totalTime+expTimeStep,simTimeStep,timeEps);
if errFlag
    return;
end

%average trajectory
[mtLengthAve,mtLengthSD,errFlag] = averageMtTraj(mtLength,simTimeStep,...
    expTimeStep,aveInterval);
if errFlag
    return;
end

mtLenChange = mtLengthAve(2:end) - mtLengthAve(1:end-1);
aveChange = mean(mtLenChange);

fid = fopen('test5.tsm','w');
fprintf(fid,'%10.6f\n',mtLenChange);
fclose(fid);

save('test5','mtLenChange');

% lengthD = iddata(mtLenChange,[],1);
% lengthD = detrend(lengthD);
% 
% model10 = armax(lengthD,[1 0]);
% model20 = armax(lengthD,[2 0]);
% model30 = armax(lengthD,[3 0]);
% model40 = armax(lengthD,[4 0]);
% model50 = armax(lengthD,[5 0]);
% model60 = armax(lengthD,[6 0]);
% model70 = armax(lengthD,[7 0]);
% model11 = armax(lengthD,[1 1]);
% model21 = armax(lengthD,[2 1]);
% model31 = armax(lengthD,[3 1]);
% model41 = armax(lengthD,[4 1]);
% model51 = armax(lengthD,[5 1]);
% model61 = armax(lengthD,[6 1]);
% model71 = armax(lengthD,[7 1]);
% model12 = armax(lengthD,[1 2]);
% model22 = armax(lengthD,[2 2]);
% model32 = armax(lengthD,[3 2]);
% model42 = armax(lengthD,[4 2]);
% model52 = armax(lengthD,[5 2]);
% model62 = armax(lengthD,[6 2]);
% model72 = armax(lengthD,[7 2]);
% model13 = armax(lengthD,[1 3]);
% model23 = armax(lengthD,[2 3]);
% model33 = armax(lengthD,[3 3]);
% model43 = armax(lengthD,[4 3]);
% model53 = armax(lengthD,[5 3]);
% model63 = armax(lengthD,[6 3]);
% model73 = armax(lengthD,[7 3]);
% model14 = armax(lengthD,[1 4]);
% model24 = armax(lengthD,[2 4]);
% model34 = armax(lengthD,[3 4]);
% model44 = armax(lengthD,[4 4]);
% model54 = armax(lengthD,[5 4]);
% model64 = armax(lengthD,[6 4]);
% model74 = armax(lengthD,[7 4]);
% 
% fpeV(1,1) = fpe(model10);
% fpeV(2,1) = fpe(model20);
% fpeV(3,1) = fpe(model30);
% fpeV(4,1) = fpe(model40);
% fpeV(5,1) = fpe(model50);
% fpeV(6,1) = fpe(model60);
% fpeV(7,1) = fpe(model70);
% fpeV(1,2) = fpe(model11);
% fpeV(2,2) = fpe(model21);
% fpeV(3,2) = fpe(model31);
% fpeV(4,2) = fpe(model41);
% fpeV(5,2) = fpe(model51);
% fpeV(6,2) = fpe(model61);
% fpeV(7,2) = fpe(model71);
% fpeV(1,3) = fpe(model12);
% fpeV(2,3) = fpe(model22);
% fpeV(3,3) = fpe(model32);
% fpeV(4,3) = fpe(model42);
% fpeV(5,3) = fpe(model52);
% fpeV(6,3) = fpe(model62);
% fpeV(7,3) = fpe(model72);
% fpeV(1,4) = fpe(model13);
% fpeV(2,4) = fpe(model23);
% fpeV(3,4) = fpe(model33);
% fpeV(4,4) = fpe(model43);
% fpeV(5,4) = fpe(model53);
% fpeV(6,4) = fpe(model63);
% fpeV(7,4) = fpe(model73);
% fpeV(1,5) = fpe(model14);
% fpeV(2,5) = fpe(model24);
% fpeV(3,5) = fpe(model34);
% fpeV(4,5) = fpe(model44);
% fpeV(5,5) = fpe(model54);
% fpeV(6,5) = fpe(model64);
% fpeV(7,5) = fpe(model74);

% for i=1:20
%     for j=0:20
%         model = armax(lengthD,[i j]);
%         fpeV(i,j+1) = fpe(model);
%     end
% end


