function runCtBatch(job)
%function to run batch defined in analyzeMoviesGUI
%
%SYNOPSIS  runCtBatch(job)
%
%INPUT     job: Structure defining jobs to run. Generated by
%               analyzeMoviesGUI
%
%OUTPUT    writes output to file (projName-data)
%
%c: Jonas, 2/03
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%no test input (testing has to be done in analyzeMoviesGUI)

%get #of jobs
nJobs = length(job);

%init
%done (0 = do job, 1 = done, 2 = wait)
done = zeros(nJobs,1);
dataFileCreated = zeros(nJobs,1);

%read mainDir, name of job file
mainDir = getenv('BIODATA');
if isempty(mainDir)
    mainDir = getenv('HOME');
end
cd(mainDir);
if isempty(job(1).mainSaveDir)
    mainSaveDir = mainDir;
else
    mainSaveDir = job(1).mainSaveDir;
end
lastName = job(1).lastName;

%if there is no job file of name lastName (e.g. if run from command line): create
if exist([mainSaveDir,filesep,lastName,'.mat'])~=2
    save([mainSaveDir,filesep,'job-',nowString],'job');
    lastName = ['job-',nowString];
end

%create/open logfile
fidJob = fopen([mainSaveDir,filesep,'job-',nowString,'.log'],'w');

fprintf(fidJob,[nowString,' jobLog created\n']);
fprintf(fidJob,['                     jobfile:',lastName,' %g jobs\n'],nJobs);

try
    %loop until finished
    while ~all(done==1)
        %loop through all jobs
        for i = 1:nJobs
            fprintf(fidJob,[nowString,' start job %g\n'],i);
            disp([nowString,' start job',num2str(i),'/',num2str(nJobs),' - ',job(i).projName]);

            %change to dataPath of specific job
            cd(mainDir);
            cd(job(i).projProperties.dataPath);

            %switch according to job status (0,1,2)
            switch done(i)
                %job to do
                case 0
                    try
                        todoList = bsum2bvec(job(i).jobs2run);
                        %create/find logfile
                        if job(i).createNew==1
                            projData = [job(i).projName,'-data-',nowString];
                            dataProperties = job(i).dataProperties;
                            fprintf(fidJob,[nowString,' create %s\n'],projData);
                            save(projData,'dataProperties');

                            %save project properties
                            projProperties = job(i).projProperties;
                            projProperties.projName = job(i).projName;
                            projProperties.datafileName = projData;
                            fprintf(fidJob,[nowString,' save project properties\n']);
                            job(i).projProperties = projProperties;
                            save(projData,'projProperties','-append');

                            job(i).projData = [projData,'.mat'];
                            job(i).createNew = 0;

                            update = 0;
                            dataFileCreated(i) = 1;
                        else
                            %there is no new file being created, analysis
                            %continues.
                            projData = job(i).projData;
                            dataProperties = job(i).dataProperties;
                            projProperties = job(i).projProperties;
                            projProperties.projName = job(i).projName;
                            projProperties.datafileName = projData;
                            job(i).projProperties = projProperties;
                            %save updated data properties
                            update = 1;

                        end

                        %open/create logfile
                        fprintf(fidJob,[nowString,' fid = fopen(%s.log,''a+'');\n'],job(i).projData);
                        fid = fopen([job(i).projData,'.log'],'a+');
                        fprintf(fid,['\n-----------------\n\n',nowString,' start calculations(%s)\n'],lastName);

                        if update
                            %update data properties
                            fprintf(fidJob,[nowString,' save(',projData,',''dataProperties/projProperties'',''-append'');\n']);
                            fprintf(fid,[nowString,' update dataProperties&projProperties\n']);
                            if exist(projData,'file')
                                save(projData,'dataProperties','-append');
                                save(projData,'projProperties','-append');
                            else
                                save(projData,'dataProperties');
                                save(projData,'projProperties','-append');
                            end
                        end


                        j = 1;
                        %loop through todoList
                        while j<=length(todoList)&done(i)==0
                            %switch according to which job is to be done
                            switch todoList(j)
                                case 1 %filter movie
                                    %                                 try
                                    fprintf(fid,[nowString,' filter movie\n']);

                                    %read movie. Correct background if
                                    %necessary
                                    moviename = [job(i).projName,'.r3d'];
                                    % don't load corrected movie: We'll do
                                    % that in a cdLoadMovie loop
                                    correctBackground(moviename,job(i).correctBackground,[],fidJob,fid);

                                    %compose filteredMovieName
                                    filteredMovieName = 'filtered_movie_';
                                    filteredMovieName=[filteredMovieName, dataProperties.name,'.fim'];

                                    %check wheter another movie already
                                    %exists (within the loading loop, we
                                    %want to append!)
                                    if exist(filteredMovieName)
                                        fprintf(fidJob,[nowString,' delete(%s);\n'],filteredMovieName);
                                        fprintf(fid,[nowString,' delete old filtered movie\n']);
                                        delete(filteredMovieName);
                                    end


                                    % load first part
                                    [movie, movieHeader, loadStruct] = ...
                                        cdLoadMovie('corr/raw',[],dataProperties);

                                    % loop with movie-chunks
                                    loopDone = 0;
                                    while ~loopDone

                                        %filter movie
                                        lf = loadStruct.loadedFrames;
                                        fprintf(fidJob,[nowString,' filteredMovie = filtermovie(movie,dataProperties.FILTERPRM);\n']);
                                        fprintf(fid,sprintf('%s, filtermovie frames %i:%i\n',nowString,lf(1),lf(end)));
                                        filteredMovie = filtermovie(movie,dataProperties.FILTERPRM);



                                        %now save. Writemat appends to an
                                        %existing file
                                        fprintf(fidJob,[nowString,' writemat(%s,filteredMovie);\n'],filteredMovieName);
                                        fprintf(fid,[nowString,' save filtered movie\n']);
                                        writemat(filteredMovieName,filteredMovie,1,5);

                                        clear('filteredMovie'); %to prevent memory problems

                                        if ~isempty(loadStruct.frames2load)
                                            [movie, movieHeader, loadStruct] = ...
                                                cdLoadMovie(loadStruct.movieType,[],loadStruct);
                                        else
                                            loopDone = 1;
                                        end

                                    end % while loop

                                    %save last result
                                    lastResult = 'filteredMovie';
                                    save(projData,'lastResult','-append');

                                    %update data properties
                                    fprintf(fidJob,[nowString,' save(%s,''projProperties'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' update projProperties\n']);
                                    %adjust status. If there has been an older idlist, it is useless now.
                                    prevStatus = bsum2bvec(job(i).projProperties.status);
                                    job(i).projProperties.status = 1;
                                    projProperties = job(i).projProperties;
                                    save(projData,'projProperties','-append');

                                    %update job file
                                    fprintf(fid,[nowString,' update job\n']);
                                    job(i).jobs2run = job(i).jobs2run-1;
                                    newName = ['job-',nowString];
                                    saveStr = [mainSaveDir,filesep,newName];
                                    fprintf(fidJob,[nowString,' save(%s''job'');\n'],saveStr);
                                    job(1).lastName = newName;
                                    save(saveStr,'job');
                                    delStr = [mainSaveDir,filesep,lastName];
                                    fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
                                    delete([delStr,'.mat']);
                                    lastName = newName;



                                case 2 %spotDetector
                                    %                                 try
                                    fprintf(fid,[nowString,' detect spots\n']);


                                    % find raw movie name
                                    rawMovieNameList = ...
                                        searchFiles('r3d$|3D.dv$','','',0);
                                    filteredMovieNameList = ...
                                        searchFiles('fim$|moviedat','','',0);
                                    rawMovieName = ...
                                        fullfile(rawMovieNameList{1,2},rawMovieNameList{1,1});
                                    filteredMovieName = ...
                                        fullfile(filteredMovieNameList{1,2},filteredMovieNameList{1,1});


                                    [slist, dataProperties,testRatios] = ...
                                        detectSpots(rawMovieName, ...
                                        filteredMovieName, ...
                                        dataProperties, 2);


                                    %save slist
                                    fprintf(fidJob,[nowString,' save(%s,''slist'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' save slist\n']);
                                    save(projData,'slist','-append');
                                    save(['slist-',nowString],'slist'); %save to disk, too

                                    %save dataProperties
                                    fprintf(fidJob,[nowString,' save(%s,''dataProperties'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' save dataProperties\n']);
                                    save(projData,'dataProperties','-append');
                                    save('dataProperties','dataProperties'); %save to disk, too

                                    %save last result
                                    lastResult = 'slist';
                                    save(projData,'lastResult','-append');

                                    % save testRatios
                                    if ~isempty(testRatios)
                                        save(sprintf('testRatios_%s',dataProperties.name),'testRatios');
                                    end

                                    %update data properties
                                    fprintf(fidJob,[nowString,' save(%s,''projProperties'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' update projProperties\n']);
                                    %adjust status. If there has been an older idlist, it is useless now.
                                    prevStatus = bsum2bvec(job(i).projProperties.status);
                                    job(i).projProperties.status = sum(prevStatus(find(prevStatus<2)))+2;
                                    projProperties = job(i).projProperties;
                                    save(projData,'projProperties','-append');

                                    %update job file
                                    fprintf(fid,[nowString,' update job\n']);
                                    job(i).jobs2run = job(i).jobs2run-2;
                                    newName = ['job-',nowString];
                                    saveStr = [mainSaveDir,filesep,newName];
                                    fprintf(fidJob,[nowString,' save(%s''job'');\n'],saveStr);
                                    job(1).lastName = newName;
                                    save(saveStr,'job');
                                    delStr = [mainSaveDir,filesep,lastName];
                                    fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
                                    delete([delStr,'.mat']);
                                    lastName = newName;


                                case 4 %spotID
                                    %                                 try
                                    fprintf(fid,[nowString,' link spots\n']);

                                    %read slist
                                    fprintf(fidJob,[nowString,' load(%s,''slist'');\n'],projData);
                                    fprintf(fid,[nowString,' load slist\n']);
                                    load(projData,'slist');

                                    %run spotID
                                    fprintf(fidJob,[nowString,' idlist2 = linker(slist,dataProperties);\n']);
                                    fprintf(fid,[nowString,' idlist2 = linker(slist,dataProperties);\n']);
                                    %opt = job(i).dataProperties.IDopt;
                                    %idlist = spotID(slist,opt,job(i).dataProperties,job(i).projName);
                                    idlist2 = linker(slist,dataProperties);

                                    %save idlist and lastResult
                                    fprintf(fidJob,[nowString,' save(%s,''idlist2'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' save idlist2\n']);
                                    save(projData,'idlist2','-append');
                                    lastResult = 'idlist2';
                                    save(projData,'lastResult','-append');

                                    % save idlist also outside of datafile
                                    save(sprintf('idlist2_%s',nowString),'idlist2')

                                    %update data properties
                                    fprintf(fidJob,[nowString,' save(%s,''projProperties'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' update projProperties\n']);
                                    prevStatus = bsum2bvec(job(i).projProperties.status);
                                    job(i).projProperties.status = sum(prevStatus(find(prevStatus<4)))+4;
                                    projProperties = job(i).projProperties;
                                    save(projData,'projProperties','-append');

                                    %update job file
                                    fprintf(fid,[nowString,' update job\n']);
                                    job(i).jobs2run = job(i).jobs2run-4;
                                    newName = ['job-',nowString];
                                    saveStr = [mainSaveDir,filesep,newName];
                                    fprintf(fidJob,[nowString,' save(%s''job'');\n'],saveStr);
                                    job(1).lastName = newName;
                                    save(saveStr,'job');
                                    delStr = [mainSaveDir,filesep,lastName];
                                    fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
                                    delete([delStr,'.mat']);
                                    lastName = newName;



                                case 8 %labelgui
                                    %do not do anything yet; do other jobs first
                                    done(i) = 2;
                                case 16 %trackTags
                                    %                                 try
                                    fprintf(fid,[nowString,' track tags\n']);

                                    %find out whether to use idlist or idlist_L
                                    load(projData,'lastResult');
                                    %try to load both; turn of warning
                                    fprintf(fidJob,[nowString,' load(%s,''idlist/idlist-L'');\n'],projData);
                                    s  =  warning('query', 'all');
                                    warning off all;
                                    load(projData,'idlist2');
                                    load(projData,'idlist_L2');
                                    warning(s); %turn back on the warnings
                                    %if there is a re-linked idlist and spotID has not just been
                                    %run: use idlist-L
                                    if exist('idlist_L2','var')&~strcmp(lastResult,'idlist2')
                                        idlist = idlist_L2;
                                        idname = 'idlist_L2';
                                    else
                                        idlist = idlist2;
                                        idname = 'idlist2';
                                    end

                                    %confirm loading idlist
                                    fprintf(fidJob,[nowString,' ',idname,' loaded\n']);
                                    fprintf(fid,[nowString,' ',idname,' loaded\n']);

                                    %read movie
                                    % load movie (corrected if available)
                                    fprintf(fidJob,[nowString,' find movie\n']);
                                    fprintf(fid,[nowString,' load raw/corrected movie\n']);
                                    [movie, movieHeader, loadStruct] = ...
                                        cdLoadMovie('corr/raw',[],struct('maxSize',dataProperties.maxSize,'noMovie',1));

                                    movieInfo = {loadStruct.movieName, loadStruct.movieType};

                                    fprintf(fidJob,[nowString,' track tags\n']);
                                    fprintf(fid,[nowString,' track tags\n']);
                                    idlisttrack2 = tagTracker(movieInfo,idlist,dataProperties);

                                    %                                     % loop with movie-chunks
                                    %                                     loopDone = 0;
                                    %                                     idFieldNames = fieldnames(idlist);
                                    %                                     nFields = length(idFieldNames);
                                    %                                     clear idlisttrack %make sure there isn't any old idlsittrack around
                                    %                                     idlisttrack(1:movieHeader.numTimepoints) = ...
                                    %                                         cell2struct(cell(nFields,1),...
                                    %                                         idFieldNames);
                                    %
                                    %                                     while ~loopDone
                                    %
                                    %                                         % find which frames have been loaded
                                    %                                         lf = loadStruct.loadedFrames;
                                    %
                                    %                                         %run tracktags
                                    %                                         fprintf(fidJob,sprintf(...
                                    %                                             '%s idlisttrack(%i:%i)=trackTags(movie,idlist,dataProperties);\n',...
                                    %                                             nowString,lf(1),lf(end)));
                                    %
                                    %                                         fprintf(fid,sprintf(...
                                    %                                             '%s idlisttrack(%i:%i)=trackTags(movie,idlist,dataProperties);\n',...
                                    %                                             nowString,lf(1),lf(end)));
                                    %                                         % correct for 5 correction frames
                                    %                                         if ~isempty(movieHeader) && ...
                                    %                                                 ~isempty(movieHeader.correctInfo.correctFrames)
                                    %                                             lf = lf - movieHeader.correctInfo.correctFrames(1);
                                    %                                         end
                                    %                                         idlisttrack(lf) = trackTags(movie,idlist(lf),job(i).dataProperties);
                                    %
                                    %                                         clear('movie'); %to prevent memory problems
                                    %
                                    %                                         if ~isempty(loadStruct.frames2load)
                                    %                                             [movie, movieHeader, loadStruct] = ...
                                    %                                                 cdLoadMovie(loadStruct.movieType,[],loadStruct);
                                    %                                         else
                                    %                                             loopDone = 1;
                                    %                                         end
                                    %
                                    %                                     end % loop movie-chunks

                                    %clear movie from memory
                                    %clear('movie','idlist','idlist_L');

                                    %save idlisttrack and lastResult
                                    fprintf(fidJob,[nowString,' save(%s,''idlisttrack2'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' save idlisttrack2\n']);
                                    save(projData,'idlisttrack2','-append');
                                    lastResult = 'idlisttrack2';
                                    save(projData,'lastResult','-append');

                                    % save idlist also outside of datafile
                                    save(sprintf('idlisttrack2_%s',nowString),'idlisttrack2')

                                    %update data properties
                                    fprintf(fidJob,[nowString,' save(%s,''projProperties'',''-append'');\n'],projData);
                                    fprintf(fid,[nowString,' update projProperties\n']);
                                    prevStatus = bsum2bvec(job(i).projProperties.status);
                                    job(i).projProperties.status = sum(prevStatus(find(prevStatus<16)))+16;
                                    projProperties = job(i).projProperties;
                                    save(projData,'projProperties','-append');

                                    %update job file
                                    fprintf(fid,[nowString,' update job\n']);
                                    job(i).jobs2run = job(i).jobs2run-16;
                                    newName = ['job-',nowString];
                                    saveStr = [mainSaveDir,filesep,newName];
                                    fprintf(fidJob,[nowString,' save(%s''job'');\n'],saveStr);
                                    job(1).lastName = newName;
                                    save(saveStr,'job');
                                    delStr = [mainSaveDir,filesep,lastName];
                                    fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
                                    delete([delStr,'.mat']);
                                    lastName = newName;



                                case 32 %labelgui2
                                    %do not do anything yet; do other jobs first
                                    done(i) = 2;
                                case 64 %analysis 1
                                    done(i) = 1; %not implemented yet
                                case 128 %analysis 2
                                    done(i) = 1; %not implemented yet
                            end %todoSwitch
                            j = j+1;
                        end %todoLoop
                        if done(i)==0 %if all jobs done and no wait -> done = 1
                            done(i) = 1;
                        end

                    catch %if any error: come here
                        %log lasterr
                        %if lasterr is from aborted waitbar: make more explicative

                        err = lasterror;
                        if findstr(err.message,['Error using ==> get',char(10),'Invalid handle'])
                            %if aborted waitbar:
                            %ask for complete interruption
                            err = 'tracking aborted by user';
                            button = questdlg('Do you want to abort...','Evaluation interrupted by user!','This job','All','All');
                            if strcmp(button,'All')
                                fprintf(fid,[nowString,' error',err,'\n']);
                                fclose(fid);
                                error(err);
                            end
                        end

                        fprintf(fidJob,['%s error: %s\n'],nowString,err.message);
                        fprintf(fid,['%s error: %s\n'],nowString,err.message);
                        disp(['job-',num2str(i),' error: ',err.message]);

                        for iErr = 1:length(err.stack)
                            disp(sprintf( 'in %s at %i',...
                                err.stack(iErr).name,err.stack(iErr).line))
                        end

                        %do not continue execution
                        done(i) = 1;
                        %close any open waitbars
                        h = findall(0,'Tag','TMWWaitbar');
                        close(h);
                        %close any open messageboxes
                        h = findall(0,'Tag','MessageBox');
                        close(h);
                    end

                    %close current logfile
                    fprintf(fid,'closing logfile...\n');
                    fclose(fid);

                case 1
                    %do nothing: jobs are only deleted at the very end
                case 2
                    %----------launch gui---------
                    try
                        %open/create logfile
                        disp('launch labelgui')
                        fprintf(fidJob,[nowString,' fid = fopen(%s.log,''a+'');\n'],job(i).projData);
                        fid = fopen([job(i).projData,'.log'],'a+');
                        fprintf(fid,['\n',nowString,' labelgui(%s)\n'],lastName);
                        fprintf(fidJob,[nowString,' labelgui;\n']);

                        %load project data/data properties
                        fprintf(fid,[nowString,' load data for labelgui\n']);
                        projData = job(i).projData;
                        %load(projData,'lastResult'); %could be idlist from linker or tracker (idlist/idlisttrack)

                        %find which job is run (8 or 32) - decides which idlist to load
                        jNumber = min(bsum2bvec(job(i).jobs2run));
                        if jNumber==8
                            lastResult = 'idlist2';
                        elseif jNumber==32
                            lastResult = 'idlisttrack2';
                        else
                            error('wrong job2run!!') %this would be really bad
                        end

                        load(projData,'dataProperties');
                        load(projData,'projProperties');


                        %                         % try to load filtered movie. If no filtered movie,
                        %                         % we have a huge problem, anyway
                        %                         [filteredMovie, dummy, infoStruct] = cdLoadMovie('filtered');
                        %                         filteredMovieName = infoStruct.movieName;

                        %idlist
                        fprintf(fidJob,[nowString,' load(',projData,',',lastResult,');\n']);

                        load(projData,lastResult); %loads idlist (tracker/linker)
                        eval(sprintf('idlist = %s;',lastResult));


                        % load filtered movie
                        [filteredMovie, dummy, loadStruct] = ...
                            cdLoadMovie('filtered', [], ...
                            dataProperties);

                        fprintf(fidJob,[nowString,' launching labelgui2;\n']);
                        fprintf(fid,[nowString,' launching labelgui2\n']);

                        labelguiH = LG_loadAllFromOutside(...
                            filteredMovie,...
                            pwd,...
                            loadStruct,...
                            dataProperties,...
                            idlist,lastResult(1:end-1));

                        %wait for save&continue
                        fprintf(fidJob,[nowString,' wait for user saving idlist in labelgui\n']);
                        fprintf(fid,[nowString,' wait for user saving idlist in labelgui\n']);
                        disp('to continue, save idlist, to abort close labelgui');

                        uiwait(labelguiH);



                        % read idlist_L2 or idlisttrack_L2
                        newIdName = [lastResult(1:end-1),'_L2'];
                        eval(sprintf('%s = LG_readIdlistFromOutside;',newIdName));

                        if isempty(eval(newIdName))
                            error('checking idlist aborted')
                        end






                        %save 'lastResult' and ''lastResult''
                        lastResult = newIdName;
                        fprintf(fidJob,[nowString,' save(%s,',lastResult,',''-append'');\n'],projData);
                        fprintf(fid,[nowString,' save ',lastResult,'\n']);
                        save(projData,lastResult,'-append');
                        save(projData,'lastResult','-append');

                        % save idlist also outside of datafile
                        save(sprintf('%s_%s',lastResult,nowString),lastResult)

                        %update data properties
                        fprintf(fidJob,[nowString,' save(%s,''projProperties'',''-append'');\n'],projData);
                        fprintf(fid,[nowString,' update projProperties\n']);
                        prevStatus = bsum2bvec(job(i).projProperties.status);
                        job(i).projProperties.status = sum(prevStatus(find(prevStatus<jNumber)))+jNumber;
                        projProperties = job(i).projProperties;
                        save(projData,'projProperties','-append');

                        %update job file
                        fprintf(fid,[nowString,' update job\n']);
                        job(i).jobs2run = job(i).jobs2run-jNumber;
                        newName = ['job-',nowString];
                        saveStr = [mainSaveDir,filesep,newName];
                        fprintf(fidJob,[nowString,' save(%s''job'');\n'],saveStr);
                        job(1).lastName = newName;
                        save(saveStr,'job');
                        delStr = [mainSaveDir,filesep,lastName];
                        fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
                        delete([delStr,'.mat']);
                        lastName = newName;

                        %check where to go next
                        if job(i).jobs2run==0
                            done(i) = 1;
                        else %more needs to be done->restart
                            done(i) = 0;
                        end

                    catch %if any error: come here



                        %log lasterr
                        fprintf(fidJob,[nowString,' error:',lasterr,'\n']);
                        fprintf(fid,[nowString,' error',lasterr,'\n']);
                        disp(['job-',num2str(i),' ',lasterr]);
                        %do not continue execution
                        done(i) = 1;
                    end

                    %close current logfile
                    fprintf(fid,'closing logfile...\n');
                    fclose(fid);

            end %donetype job switch

            %change directory back to oldDir
            cd(mainDir);
        end %nJob loop

    end %'while not everything done==1'-loop




    %delete jobs and maybe job file
    for i = nJobs:-1:1
        %if selected: delete all previous dataFiles
        if job(i).eraseAllPrev==1
            cd(mainDir);
            cd(job(i).projProperties.dataPath);
            dataFiles = dir([job(i).projName,'-data*']);
            dataNum = length(dataFiles);
            if dataNum>2 %if not, there is nothing to delete
                %store files not to delete
                myDataFile = chooseFile([job(i).projName,'-data'],[],'new','log');
                myLogFile = chooseFile([job(i).projName,'-data'],[],'new'); %logfile is always the most recent
                %delete files
                for j = 1:dataNum
                    if ~strcmp(dataFiles(j).name,myDataFile)&~strcmp(dataFiles(j).name,myLogFile)
                        delStr = [dataFiles(j).name];
                        fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
                        delete(delStr);
                    end
                end
            end
        end
        if job(i).jobs2run==0
            fprintf(fidJob,[nowString,' delete job',num2str(i),';\n']);
            job(i) = [];
        else
            fprintf(fidJob,[nowString,' keep job',num2str(i),';\n']);
        end
    end

    if isempty(job)
        delStr = [mainSaveDir,filesep,lastName];
        fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
        delete([delStr,'.mat']);
    else %update job. Delete first, then save (the last save could be not so long ago!)
        newName = ['job-',nowString];
        delStr = [mainSaveDir,filesep,lastName];
        fprintf(fidJob,[nowString,' delete(%s);\n'],delStr);
        delete([delStr,'.mat']);saveStr = [mainSaveDir,filesep,newName];
        fprintf(fidJob,[nowString,' save(%s''job'');\n'],saveStr);
        job(1).lastName = newName;
        save(saveStr,'job');
        lastName = newName;
    end
    disp([nowString,' evaluation finished']);
catch
    fprintf(fidJob,[nowString,lasterr,'\n']);
    disp(lasterr);
    disp([nowString,' evaluation terminated']);
end

fclose('all');