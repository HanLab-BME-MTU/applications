function plotEachTrackNA(savedStateFile)
% Utility to view zoomed in views of tracks generated by the 
% Focal Adhesion Analysis Process
% 
%     Inputs:  .mat file containing necessary variables from FA package
%               run. (see dataPath_analysisAll in analyzeAdhesionMaturation.m)
%     Outputs: multiple plot files.  
%             
%      
%
% orig code from function by Sangyoon Han
% refactored/isolated by Andrew R. Jamieson - Feb 2017



% Load Track info saved during run of FA package.
load(savedStateFile);

paxImageCropped=MD.channels_(iChan).loadImage(1); 
% size of the region of interest
[imSizeY,imSizeX] = size(paxImageCropped);
r1 = 50;
h2=figure;
for k=1:numel(trNAonly)%[7 15 32 127 129]%afterFAK[1 2 18 30 36 11 12 14 39 41 44]% 
    % try to crop window around the track
    if isempty(trNAonly(k).startingFrame) 
        continue
    end
    if strcmp(trNAonly(k).state{trNAonly(k).startingFrame},'FC') || strcmp(trNAonly(k).state{trNAonly(k).startingFrame},'FA')
        continue
    end
    fstart = max(trNAonly(k).startingFrame-20,1);
    fend = min(trNAonly(k).endingFrame,nFrames);
    iSF = trNAonly(k).startingFrame;
    wRoi = min(trNAonly(k).xCoord(iSF),r1)...
        +min(imSizeX+1-(trNAonly(k).xCoord(iSF)),r1);
    hRoi = min(trNAonly(k).yCoord(iSF),r1)...
        +min(imSizeY+1-(trNAonly(k).yCoord(iSF)),r1);
    set(h2,'Units','inches')
    set(h2,'PaperPositionMode','auto')
    set(h2, 'Position', [1,1,wRoi/(hRoi), 1])

%     eachPaxPath = [paxPath filesep '/track' num2str(k,iiformat)];
%     eachEpsPath = [epsPath filesep '/track' num2str(k,iiformat)];
%     if ~exist(eachPaxPath,'dir') || ~exist(eachEpsPath,'dir')
%         mkdir(eachPaxPath);
%         mkdir(eachEpsPath);
%     end

    for j=fstart:fend
        ha1 = get(h2,'CurrentAxes');%subplot('position',[0  0.5  1  0.5]);
        if j==fstart
%             paxImageCropped = imread(strcat(paxPath,'/pax',num2str(j,iiformat),'.tif'));
            paxImageCropped=MD.channels_(iChan).loadImage(j); 
            xminROI = round(max(1,trNAonly(k).xCoord(iSF)-(r1-1))); 
            xmaxROI = round(min(imSizeX,trNAonly(k).xCoord(iSF)+r1)); 
            yminROI = round(max(1,trNAonly(k).yCoord(iSF)-(r1-1)));
            ymaxROI = round(min(imSizeY,trNAonly(k).yCoord(iSF)+r1));

            paxImageCropped2 = paxImageCropped(yminROI:ymaxROI,xminROI:xmaxROI);
            invPaxImageCropped2 = imcomplement(paxImageCropped2);
            
%             lastPax = imread(strcat(paxPath,'/pax',num2str(nFrames,iiformat),'.tif'));
            lastPax=MD.channels_(iChan).loadImage(nFrames);
            lastPaxCropped = lastPax(yminROI:ymaxROI,xminROI:xmaxROI);
            invLastPaxCropped = imcomplement(lastPaxCropped);
            
            pmax = max([invPaxImageCropped2(:); invLastPaxCropped(:)]);
            pmin = min([invPaxImageCropped2(:); invLastPaxCropped(:)]);
            if j~= iSF && strcmp(trNAonly(k).state{iSF} , 'NA') % remember the first NA's position
                xFirst = trNAonly(k).xCoord(iSF);
                yFirst = trNAonly(k).yCoord(iSF);
%                     bkgAmpFirst = trNAonly(k).bkgAmp(iSF);
                ampFirst = trNAonly(k).amp(iSF);
                sigmaFirst = trNAonly(k).sigma(iSF);
            end
        end
        if isempty(ha1)
            imshow(imcomplement(paxImageCropped2),[pmin pmax]),hold on
            ha1 = get(h2,'CurrentAxes');
        else
            imshow(imcomplement(paxImageCropped2),[pmin pmax],'Parent', ha1); hold(ha1,'on')
        end
        if strcmp(trNAonly(k).state{j} , 'BA')
            % drawing tracks
            plot(ha1,xFirst-xminROI,yFirst-yminROI,'g', 'LineWidth', 0.5)
            % remembering adhesion intensity and TF
            ynmin = max(1,round(yFirst)-neighPix);
            ynmax = min(size(tsMap,1),round(yFirst)+neighPix);
            xnmin = max(1,round(xFirst)-neighPix);
            xnmax = min(size(tsMap,2),round(xFirst)+neighPix);
            %here, now I try to do gaussian fit that
            %pointsourceDetection used
            paxNeigh = double(paxImageCropped(ynmin:ynmax,xnmin:xnmax));
            pstruct = fitGaussians2D(double(paxImageCropped), xFirst, yFirst, ampFirst*0.1, sigmaFirst*0.5, min(paxNeigh(:)),'xyAc');
            trNAonly(k).amp(j) = pstruct.A(1);
            if isnan(pstruct.A)
                trNAonly(k).amp(j) = double(paxImageCropped(round(yFirst),round(xFirst)))-min(paxNeigh(:));
            end
        elseif strcmp(trNAonly(k).state{j} , 'NA')
            % drawing tracks
            plot(ha1,trNAonly(k).xCoord(1:j)-xminROI,trNAonly(k).yCoord(1:j)-yminROI,'r', 'LineWidth', 0.5)
        elseif strcmp(trNAonly(k).state{j} , 'FC')
            % drawing tracks
            plot(ha1,trNAonly(k).xCoord(1:j)-xminROI,trNAonly(k).yCoord(1:j)-yminROI,'Color',[255/255 153/255 51/255], 'LineWidth', 0.5)
            adhBoundary = trNAonly(k).adhBoundary{j};
            plot(ha1,adhBoundary(:,2)-xminROI, adhBoundary(:,1)-yminROI, 'Color',[255/255 153/255 51/255], 'LineWidth', 0.5) %adhesion boundary
        elseif strcmp(trNAonly(k).state{j} , 'FA')
            % drawing tracks
            plot(ha1,trNAonly(k).xCoord(1:j)-xminROI,trNAonly(k).yCoord(1:j)-yminROI,'k', 'LineWidth', 0.5)
            adhBoundary = trNAonly(k).adhBoundary{j};
            plot(ha1,adhBoundary(:,2)-xminROI, adhBoundary(:,1)-yminROI, 'k', 'LineWidth', 0.5) %adhesion boundary
        end
        curRenderer = get(h2,'Renderer');
        if ~strcmp(curRenderer,'painters')
            set(h2,'Renderer','painters')
        end
%         print('-depsc2', '-r150', strcat(eachEpsPath,'/trackFrame',num2str(j,iiformat),'.eps'));
%         print('-dtiff', '-r150', strcat(eachPaxPath,'/trackFrame',num2str(j,iiformat),'.tif'));
        hold(ha1,'off')
    end
    seeMore = input('Do you want to look at video until the end of the movie? (y/(n))','s');
    if isempty(seeMore)
        seeMore = 'n';
    end
    if strcmp(seeMore,'y')
        if fend < nFrames
            for j=fend+1:nFrames
                %acquiring force
                ynmin = max(1,round(trNAonly(k).yCoord(fend))-neighPix);
                ynmax = min(size(tsMap,1),round(trNAonly(k).yCoord(fend))+neighPix);
                xnmin = max(1,round(trNAonly(k).xCoord(fend))-neighPix);
                xnmax = min(size(tsMap,2),round(trNAonly(k).xCoord(fend))+neighPix);

                paxImageCropped = imread(strcat(paxPath,'/pax',num2str(j,iiformat),'.tif'));
                xminROI = round(max(1,trNAonly(k).xCoord(iSF)-(r1-1))); 
                xmaxROI = round(min(imSizeX+1,trNAonly(k).xCoord(iSF)+r1)); 
                yminROI = round(max(1,trNAonly(k).yCoord(iSF)-(r1-1)));
                ymaxROI = round(min(imSizeY+1,trNAonly(k).yCoord(iSF)+r1));

                paxNeigh = double(paxImageCropped(ynmin:ynmax,xnmin:xnmax));
                xLast = trNAonly(k).xCoord(j-1);
                yLast = trNAonly(k).yCoord(j-1);
                ampLast = trNAonly(k).amp(j-1);
                sigmaLast = 2.1; %trNAonly(k).sigma(j-1);
                pstruct = fitGaussians2D(double(paxImageCropped), xLast, yLast, ampLast, sigmaLast*0.5, min(paxNeigh(:)),'xyAc');
                trNAonly(k).amp(j) = pstruct.A(1);
                trNAonly(k).xCoord(j) = pstruct.x(1);
                trNAonly(k).yCoord(j) = pstruct.y(1);
                if isnan(pstruct.A)
                    trNAonly(k).amp(j) = double(paxImageCropped(round(yLast),round(xLast)))-min(paxNeigh(:));
                    trNAonly(k).xCoord(j) = trNAonly(k).xCoord(j-1);
                    trNAonly(k).yCoord(j) = trNAonly(k).yCoord(j-1);
                end

                paxImageCropped2 = paxImageCropped(yminROI:ymaxROI,xminROI:xmaxROI);
                ha1 = get(h2,'CurrentAxes');%subplot('position',[0  0.5  1  0.5]);
                if isempty(ha1)
                    imshow(imcomplement(paxImageCropped2),[pmin pmax]),hold on
                    ha1 = get(h2,'CurrentAxes');
                else
                    imshow(imcomplement(paxImageCropped2),[pmin pmax],'Parent', ha1); hold(ha1,'on')
                end
                if strcmp(trNAonly(k).state{fend} , 'NA')
                    % drawing tracks
                    plot(ha1,trNAonly(k).xCoord(1:j)-xminROI,trNAonly(k).yCoord(1:j)-yminROI,'r', 'LineWidth', 0.5)
                elseif strcmp(trNAonly(k).state{fend} , 'FC')
                    % drawing tracks
                    plot(ha1,trNAonly(k).xCoord(1:j)-xminROI,trNAonly(k).yCoord(1:j)-yminROI,'Color',[255/255 153/255 51/255], 'LineWidth', 0.5)
                    adhBoundary = trNAonly(k).adhBoundary{j};
                    if ~isnan(adhBoundary)
                        plot(ha1,adhBoundary(:,2)-xminROI, adhBoundary(:,1)-yminROI, 'Color',[255/255 153/255 51/255], 'LineWidth', 0.5) %adhesion boundary
                    end
                elseif strcmp(trNAonly(k).state{fend} , 'FA')
                    % drawing tracks
                    plot(ha1,trNAonly(k).xCoord(1:j)-xminROI,trNAonly(k).yCoord(1:j)-yminROI,'k', 'LineWidth', 0.5)
                    adhBoundary = trNAonly(k).adhBoundary{j};
                    if ~isnan(adhBoundary)
                        plot(ha1,adhBoundary(:,2)-xminROI, adhBoundary(:,1)-yminROI, 'Color',[255/255 153/255 51/255], 'LineWidth', 0.5) %adhesion boundary
                    end
                end
                curRenderer = get(h2,'Renderer');
                if ~strcmp(curRenderer,'painters')
                    set(h2,'Renderer','painters')
                end
%                 print('-depsc2','-r150', strcat(eachEpsPath,'/trackFrame',num2str(j,iiformat),'.eps'));
%                 print('-dtiff', '-r150', strcat(eachPaxPath,'/trackFrame',num2str(j,iiformat),'.tif'));
                hold(ha1,'off')
           end
        else
            disp('It is already the end of movie!')
        end
    end
    % inquire if the estimated state is right
    disp(['The state of this adhesion is : track' num2str(k)])
    disp([num2cell(trNAonly(k).iFrame(fstart:fend)') trNAonly(k).state(fstart:fend)'])
    strFA = input('Is this state well describing what you see in the movie (no over-estimated FAs or noisy NAs)? ((y)/n)','s');
    while strcmp(strFA,'n')
        iFrames = input('Which frames do you want to change? n1:n2  ');
        state = input('What is the state in those range? (e.g. BA, NA, FC, FA)  ','s');
        for jj=iFrames
            trNAonly(k).state{jj} = state;
        end
        disp(['Now, the state of this adhesion is :' num2str(k)])
        disp([num2cell(trNAonly(k).iFrame(fstart:fend)') trNAonly(k).state(fstart:fend)'])
        strFA = input('Is this state well describing what you see in the movie (no over-estimated FAs or noisy NAs)? ((y)/n)','s');
    end
    hold off
end