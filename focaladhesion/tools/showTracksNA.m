function h2 = showTracksNA(MD, tracksNA, iPaxChannel, frameNum)
% Utility to view overall overlay of FA tracks generated by the 
% Focal Adhesion Analysis Process
% 
%     Inputs:  MD - movieData .mat file containing necessary variables from FA package
%               run.
%               tracksNA - FA tracks calculated from FA package.
%     Outputs: handle for 
%             
%      
%
% pull from function by Sangyoon Han
% by Andrew R. Jamieson Feb 2017

markerSize = 2;

paxImageCropped = MD.channels_(iPaxChannel).loadImage(frameNum); 
h2 = figure;
%Scale bar 2 um
%     paxImageCropped(15:16,10:10+round(2000/MD.pixelSize_))=max(max(paxImageCropped));
% size of the region of interest

if frameNum==1
    [imSizeY,imSizeX] = size(paxImageCropped);
end


paxImageCroppedInverted = imcomplement(paxImageCropped);
minPax = min(paxImageCroppedInverted(:));
maxPax = max(paxImageCroppedInverted(:));

imshow(paxImageCroppedInverted,[minPax+0.4*(maxPax-minPax) maxPax]), hold on
line([10 10+round(2000/MD.pixelSize_)],[15 15],'LineWidth',2,'Color',[0,0,0])


state_slice = cellfun(@(x) x(frameNum), {tracksNA.state}','UniformOutput', false);
fcIdx = cellfun(@(x) strcmp(x,'FC'), state_slice);
faIdx = cellfun(@(x) strcmp(x,'FA'), state_slice);
FCIdx = find(fcIdx);
FAIdx =  find(faIdx);


adhBound = cellfun(@(x) x, {tracksNA.adhBoundary}','UniformOutput', false);

for k = FCIdx'
    adhBoundary = adhBound{k};
%     adhBoundary = adhBoundary{frameNum};
%     plot(adhBoundary(:,2), adhBoundary(:,1), 'Color',[255/255 153/255 51/255], 'LineWidth', 0.5) %adhesion boundary
    if ~isempty(adhBoundary{frameNum})
        adhBoundary = adhBoundary{frameNum};
        plot(adhBoundary(:,2), adhBoundary(:,1), 'c', 'LineWidth', 0.5) %adhesion boundary
    end
end
% for larger adhesions
for k = FAIdx'
    adhBoundary = adhBound{k};
    if ~isempty(adhBoundary{frameNum})
        adhBoundary = adhBoundary{frameNum};
        plot(adhBoundary(:,2), adhBoundary(:,1), 'c', 'LineWidth', 0.5) %adhesion boundary
    end
end

for k=1:numel(tracksNA)
    if tracksNA(k).presence(frameNum)
        if strcmp(tracksNA(k).state{frameNum} , 'NA')
            % drawing tracks
            plot(tracksNA(k).xCoord(1:frameNum),tracksNA(k).yCoord(1:frameNum),'r', 'LineWidth', 0.5)
            plot(tracksNA(k).xCoord(frameNum),tracksNA(k).yCoord(frameNum),'ro','MarkerSize',markerSize, 'LineWidth', 0.5)
        elseif strcmp(tracksNA(k).state{frameNum} , 'FC')
            % drawing tracks
            plot(tracksNA(k).xCoord(1:frameNum),tracksNA(k).yCoord(1:frameNum),'Color',[255/255 153/255 51/255], 'LineWidth', 0.5)
            plot(tracksNA(k).xCoord(frameNum),tracksNA(k).yCoord(frameNum),'o','Color',[255/255 153/255 51/255],'MarkerSize',markerSize, 'LineWidth', 0.5)
        elseif strcmp(tracksNA(k).state{frameNum} , 'FA')
            % drawing tracks
            plot(tracksNA(k).xCoord(1:frameNum),tracksNA(k).yCoord(1:frameNum),'b', 'LineWidth', 0.5)
            plot(tracksNA(k).xCoord(frameNum),tracksNA(k).yCoord(frameNum),'bo','MarkerSize',markerSize, 'LineWidth', 0.5)
        end
    end
end
% imwrite(paxImageCropped,strcat(paxPath,'/pax',num2str(frameNum,frameNumformat),'.tif'));
% print(h2, '-depsc2', strcat(epsPath,'/pax',num2str(frameNum,frameNumformat),'.eps'));
% print(h2, '-dtiff', strcat(paxtifPath,'/pax',num2str(frameNum,frameNumformat),'.tif'));
% hgsave(h2,strcat(figPath,'/paxPeakFig',num2str(frameNum,frameNumformat)),'-v7.3')
% close(h2)
% clear h2
