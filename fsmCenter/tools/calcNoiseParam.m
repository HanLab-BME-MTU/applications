function [I0,sDN,GaussRatio]=calcNoiseParam(firstfilename,bitDepth,sigma,beta,flag)
% calcNoiseParam calculates three parameters for the noise model applied to speckle selection
%
% Run this funtion on a background region (non-speckled) cropped from an image stack 
% (use cropStack for this purpose). 
% calcNoiseParam returns the mean backgroung intensity (I0), the mean standard deviation
% (sDN) and GaussRatio, which indicates how well the dark noise of the camera approximates 
% a normal distribution. More precisely, GaussRatio corresponds to the ratio:
%
%                                std(background image)
%                           -------------------------------,
%                            std(low-pass filtered image)
%
% where 'low-pass filtered image' is the result of the convolution of the image with a 
% Gaussian kernel with standard deviation = sigma.
%
% SYNOPSIS [I0,sDN,GaussRatio]=calcNoiseParam(firstfilename,bitDepth,sigma,beta,flag)
%
% INPUT    firstfilename: name of the first file with complete path;
%                         pass firstfilename=[] for selecting the file
%                         through an open dialog
%          bitDepth     : bit depth of the camera for normalization
%          sigma        : sigma for the gaussian kernel
%          beta         : shot noise coefficient (default 2)
%          flag         : 1 if treating a single image
%
% OUTPUT   I0           : average intensity
%          sDN          : average standard deviation (sigmaDarkNoise)
%          GaussRatio   : ratio std(image)/std(filtered_image)
%
% REMARK   calcNoiseParam loads all the images into memory. For this reason, 
%          adapt image number and size to your machine's amount of memory.

if nargin == 3
    beta = 0;
    disp('No value for "beta" entered, 0 assumed');
end
beta = beta*1e-4;

if nargin < 5
    flag = 0; % treat a stack
end

% Store current directory
currDir=cd;

% Normalization boundaries
mx=2^bitDepth-1;
mn=0;

% Select first file from an open dialog if firstfilename was not passed as
% an input parameter
if isempty(firstfilename)
    
    % First image
    [fName,dirName] = uigetfile('*.tif','Select first image');
    if(isa(fName,'char') & isa(dirName,'char'))
        firstfilename=[dirName,fName];
    else
        % Return 0 values
        I0=0;
        sDN=0;
        return
    end
    
end
if flag == 0
    % Get information from firstfilename 
    [dirName,fname,fno,fext]=getFilenameBody(firstfilename);
    
end

% Change to dirName
cd(dirName);

% Check for border effect
info=imfinfo(firstfilename);
if 2*(2*sigma+1)>min([info.Width info.Height])
    disp('The intensity drop at the borders generated by the filtering biases pixel intensities');
    disp('throughout the whole image. Please select larger image or smaller sigma.');
    I0=0;sDN=0;GaussRatio=0;
    return;
end

if flag == 0
    % Load entire stack into memory -- this may require a lot of memory
    fprintf(1,'Loading stack...');
    stack=imreadstack(firstfilename);
    fprintf(1,' Done!\n');    
else
    stack=double(imread(firstfilename));
end  

% Normalize stack
stack=(stack-mn)/(mx-mn);

% Mean
fprintf(1,'Calculating I0...');
I0=mean(stack(:));
fprintf(1,' Done!\t\t\t\t[I0\t\t\t= %.8f]\n',I0);

% Standard deviation
fprintf(1,'Calculating sDN...');
% only if there is more then one image in the stack
if size(stack,3) > 1
    S=std(stack,1,3);
    % Get a mean value for the standard deviation over time
    sDN=mean(S(:));
    fprintf(1,' Done!\t\t\t[sDN\t\t= %.8f]\n',sDN);
else
    sDN=std(stack(:));
    fprintf(1,' Done!\t\t\t[sDN\t\t= %.8f]\tNote: 1 image in stack. no sDN calculation over time\n',sDN);
end    

% Calculate GaussRatio
%
% Calculate how many pixels have to be cropped from the borders
border=2*sigma+1;
border=fix(border); % if sigma is not integer

% Initialize vector
L=size(stack,3);
GaussRatios=zeros(1,L);

fprintf(1,'Calculating Gaussian ratio...');
h=waitbar(0,'Calculating Gaussian ratio');
% Calculate all ratios
for i=1:L
    % Get current image
    rImg=stack(:,:,i);
    % Filter it with user-input sigma
    fImg=gauss2d(rImg,sigma);
    % Crop border
    rImg=rImg(border:end-border+1,border:end-border+1);
    fImg=fImg(border:end-border+1,border:end-border+1);
    % Calculate current ratio
    GaussRatios(i)=std(rImg(:))/std(fImg(:));
    % Update waitbar
    waitbar(i/L,h);
end

% Close waitbar
close(h);

% Calcaulate GaussRatio as the mean of the vector GaussRatios
GaussRatio=mean(GaussRatios);

fprintf(1,' Done!\t[GaussRatio\t= %.8f]\n',GaussRatio);
fprintf(1,' \t\t\t\t\t\t\t\t\t[Beta\t    = %.8f]\n',beta);

% save noise parameters - file name contains the name of the first image of the stack
% I0=0.0276;
noiseParam = [1.96/GaussRatio sDN beta I0 1.96];
[file,path]=uiputfile('path','Select directory to save Noise Parameters');
fName = fName(5:end-4);
eval(['save ',path,filesep,fName,'np.mat noiseParam;']);

% Back to old directory
cd(currDir);
