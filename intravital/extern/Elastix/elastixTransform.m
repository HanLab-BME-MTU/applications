function [ dataImTrans  ] = elastixTransform(dataIm, dataSpacing, elastixTransforms, varargin)
% ELASTIXTRANSFORM Perform a transform on a volume, using transforms parameters generated by Elastix.
% Author: Paul Balança
%
% [ dataImTrans  ] = ELASTIXTRANSFORM(dataIm, dataSpacing, elastixTransforms, param1, val1, param2, val2, ...)
%  
%     Input:
%        dataIm              Data on which to perform the transform.
%        dataSpacing         Data spacing.
%        elastixTransforms   Transform parameters, generated by Elastix.
%
%     Parameters:
%        'format'            Type of data you want to transform.
%                             - {volume} : Transform a volume.
%                             - point : Transform some points (in mm).
%                             - index : Transform a volume (in moving volume coordinates).
%                             - deformation : Compute the all deformation field.
%        'logFile'           Filename where to save the log file.
%        'transformixExe'    Filename of the Transformix executable.
%        'outputDir'         Directory where to save Elastix outputs.
%                            The default value is a temporary directory which will be deleted at the end.
%
%     Output:  
%        dataImTrans         Volume transformed.
%
%  See Elastix documentation : http://elastix.isi.uu.nl
%

%% Parameters
p = inputParser;
p.addParamValue('format', 'volume');
p.addParamValue('logFile', '');
p.addParamValue('transformixExe', '');
p.addParamValue('outputDir', '');
p.parse(varargin{:});
parameters = p.Results;

% Temp directory
if isempty(parameters.outputDir)
    if ~isempty(getenv('TEMP'))
        tmpOutDir = getenv('TEMP');
    elseif ~isempty( strfind( computer('arch'), 'glnxa' ) ) && isdir( '/tmp' )
        tmpOutDir = '/tmp';
    else
        tmpOutDir = pwd;            
    end
    c = clock;
    uniqDirSuffix = sprintf( '.%d_%d_%d_%f_%d', c(3), c(4), c(5), c(6), randi(100) );
    pathdir = fullfile(tmpOutDir, ['elastix.tmp', uniqDirSuffix] );
else
    pathdir = parameters.outputDir;
end
if ~exist(pathdir, 'dir')
    mkdir(pathdir);
end

% Transformix path
if ~isempty(parameters.transformixExe)
    cmdTransformix = parameters.transformixExe;
else
    % M-file directory
    M = inmem('-completenames');
    for i = 1:numel(M)
        if ~isempty(strfind(M{i}, 'elastixTransform.m'))
            folderExe = fileparts(M{i});
        end
    end
    
   switch computer('arch')

       case { 'win32', 'win64'}

            cmdTransformix = fullfile(folderExe, 'transformix.exe');

       case 'glnxa64' 

            cmdTransformix = fullfile(folderExe, 'transformixLinux');

       case 'maci64'     

           cmdTransformix = fullfile(folderExe, 'transformixMac');
           
       otherwise
           
           error( 'Incompatible computer architecture' );
   end
       
end

% make sure we have permission to execute the transformix
if ismember(computer('arch'), {'glnxa64', 'maci64'})

    try
        
        [status, message, messageid] = fileattrib([cmdTransformix, '*'], '+x', 'u');

        if ~status
            error( 'Tried to assign executable permission but failed. Probably you dont have rights to do that. Contact your system administrator.' );
        end

    catch ME
    
        if strcmpi(computer('arch'), 'glnxa64')
            emsg = sprintf( 'Please make sure to give executable permission for files named transformixLinux and transformixLinuxExec in folder %s. Please contant the system administrator if you dont understand what this means.', folderExe );
        else
            emsg = sprintf( 'Please make sure to give executable permission for files named transformixMac and transformixMacExec in folder %s. Please contant the system administrator if you dont understand what this means.', folderExe );    
        end
        
        errordlg( emsg );
        error( emsg );        

    end
    
end

% Write transforms
fnameTrans = fullfile(pathdir, 'TransformParameters.%d.txt');
writeElastixTransform(elastixTransforms, fnameTrans);

%% Transform points, in physical coordinates
if strcmp(parameters.format, 'point') || strcmp(parameters.format, 'index')
    % Write points coordinates
    fnameData = fullfile(pathdir, 'inputPoints.txt');
    writeElastixPoints(dataIm, fnameData, parameters.format);

    % Call Transformix ...
    cmdTransformix = [cmdTransformix ' -ipp "' fnameData '"'];
    cmdTransformix = [cmdTransformix ' -out "' pathdir '"'];
    cmdTransformix = [cmdTransformix ' -tp "'  fullfile(pathdir, sprintf('TransformParameters.%d.txt', numel(elastixTransforms)-1)) '"'];
    
    status = system(cmdTransformix);

    % Error while transforming
    if status ~= 0
        error('>>> Error (%d) while transforming points. <<<', status);
    end

    % Load results (using input cast)
    fprintf('Load Transformix registered points ...\n');
    fname = fullfile(pathdir, 'outputpoints.txt');
    elastixPoints = readElastixPoints(fname);
    dataImTrans = elastixPoints;

    % Elastix bug ?? need + instead - used to compute new positions
    dataImTrans.point = dataImTrans.point - 2 * dataImTrans.deformation;
    for i = 1:size(dataIm, 2)
        dataImTrans.index(:,i) = round(dataImTrans.point(:,i) / dataSpacing(i)) + 1;
    end

elseif strcmp(parameters.format, 'deformation')
%% Compute the global deformation field
    
    % Call Transformix ...
    cmdTransformix = [cmdTransformix ' -ipp all'];
    cmdTransformix = [cmdTransformix ' -out "' pathdir '"'];
    cmdTransformix = [cmdTransformix ' -tp "'  fullfile(pathdir, sprintf('TransformParameters.%d.txt', numel(elastixTransforms)-1)) '"'];
    status = system(cmdTransformix);

    % Error while transforming
    if status ~= 0
        error('>>> Error (%d) while transforming points. <<<', status);
    end

    % Load results (using input cast)
    fprintf('Load Transformix Deformation Field ...\n');
    fname = fullfile(pathdir, 'deformationField.mhd');
    dataImTrans = mhdRawRead(fname);

else
%% Transform image

    % Write input volume
    fprintf('Write input volume in MHD/RAW format ...\n');
    fnameData = fullfile(pathdir, 'dataIm');
    mhdRawWrite(dataIm, dataSpacing, fnameData);

    % Call Transformix ...
    cmdTransformix = [cmdTransformix ' -in "' fnameData '.mhd"'];
    cmdTransformix = [cmdTransformix ' -out "' pathdir '"'];
    cmdTransformix = [cmdTransformix ' -tp "'  fullfile(pathdir, sprintf('TransformParameters.%d.txt', numel(elastixTransforms)-1)) '"'];
    status = system(cmdTransformix);

    % Error while transforming
    if status ~= 0
        error('>>> Error (%d) while transforming volume. <<<', status);
    end

    % Load results (using input cast)
    fprintf('Load Transformix registered volume ...\n');
    fname = fullfile(pathdir, 'result.mhd');
    dataImTrans = mhdRawRead(fname, class(dataIm));
    dataImTrans = dataImTrans.im;
end

% Load log
if ~isempty(parameters.logFile)
    fprintf('Save Transformix log ...\n');
    copyfile(fullfile(pathdir, 'transformix.log'), parameters.logFile);
end

% Remove temp files
if isempty(parameters.outputDir)
    rmdir(pathdir, 's');
end

end
