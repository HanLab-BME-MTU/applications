function [ dataTrans ] = elastixTransformPoints(data, volSize, dataSpacing, elastixTransforms, varargin)
% ELASTIXTRANSFORMPOINTS Perform a transform on a set of points, using transforms parameters generated by Elastix.
% Author: Paul Balança
%
% [ dataTrans ] = elastixTransformPoints(data, volSize, dataSpacing, elastixTransforms, param1, val1, param2, val2, ...)
%  
%     Input:
%        data                Points to transform: matrix of size Nx2 or Nx3.
%        volSize             Moving volume size.
%        dataSpacing         Data spacing.
%        elastixTransforms   Transform parameters, generated by Elastix.
%
%     Parameters:
%        'logFile'           Filename where to save the log file.
%        'transformixExe'    Filename of the Transformix executable.
%        'outputDir'         Directory where to save Elastix outputs.
%                            The default value is a temporary directory which will be deleted at the end.
%
%     Output:   
%        dataTrans           Points transformed, in the fixed volume coordinates system. 
%
% See Elastix documentation : http://elastix.isi.uu.nl
%

% Default pixel value
for i = 1:numel(elastixTransforms)
    elastixTransforms{i}.DefaultPixelValue = max(volSize(:)) * max(dataSpacing(:));
end
if numel(volSize) == 2
    volSize(3) = 1;
end

% Compute distance map for each pixel and get closest point
data = round(data);
dataTrans = data;
for i = 1:size(data, 1)

    % Binary point mask
    tmpMask = zeros(volSize);
    if volSize(3) == 1
        tmpMask(data(i,1), data(i,2)) = 1;
    else
        tmpMask(data(i,1), data(i,2), data(i,3)) = 1;
    end

    % Distance map transform
    distMap = bwdistsc( tmpMask, dataSpacing );
    %distMap = itkDistMap(tmpMask, dataSpacing);
    %distMap = itkComputeSignedMaurerDistanceMap( tmpMask );    
    distMap = elastixTransform(distMap, dataSpacing, elastixTransforms, varargin{:});

    [C,ind] = min(distMap(:));
    [I,J,K] = ind2sub(size(distMap), ind);
    if volSize(3) == 1
        dataTrans(i,:) = [I J];
    else
        dataTrans(i,:) = [I J K];
    end

end

end
