
%% The complete screen - defining PCA, etc.
function [] = whMetaGEFScreen2016(mainDirname,metaDataFname,timePerFrame)

% mainDirname = '/project/bioinformatics/Danuser_lab/GEFscreen/analysis/MetaAnalysis/ScreenFinal/';
% metaDataFname = 'GEFScreenFinal_kd0.mat';
% timePerFrame = 5;

if nargin == 0
    mainDirname = '/project/bioinformatics/Danuser_lab/GEFscreen/analysis/MetaAnalysis/ScreenFinal/';
    metaDataFname = 'GEFScreenFinal_kd0.mat';
    timePerFrame = 5;
end

%% Init
close all;
addpath(genpath('/home2/azaritsky/code/extern/export_fig'));
% addpath(genpath('/work/gdanuser/azaritsky/UTSW/code/utils/notBoxPlot'));/project/bioinformatics/Danuser_lab/shared/assaf/oldUTSWCodeAndData/code/utils/notBoxPlot
addpath(genpath('/home2/azaritsky/code/applications/monolayer'));

load([mainDirname metaDataFname]); % metaData

metaData.timePerFrame = timePerFrame;
metaData.timeToAnalyze = 200;
metaData.timePartition = 4;
metaData.spatialPartition = 3;
% ??
metaData.initialTimePartition = 0; %2

workdir = [mainDirname metaDataFname(1:end-4)];

if ~exist(workdir,'dir')
    mkdir(workdir);
end

[dirs] = whMetaInitDirectories2016(workdir);

[labels, strLabels] = getMetaLabels2016(metaData); % labels are combination of gene & shSeq

always = 0;

%% Screen
%   1. KD efficiency
%   2. Printouts of micrscopy error corrections (no output)
%   3. Extract high-dimensional features from the data
%       a. Segragate control data
%       b. PCA on control data
%       c. use coefficients to calculate PCA for all data
%   4. Visualize PCs
%   5. Gene abalysis (not day as atomic unit)
%   6. Correlate PCs of each measure to wound healing rate (healingRate directory)
%   7. MetaDayAnalysis
%   8. Shear strain analysis: correlation shear strain events and motion
%       a. CDC42 vs. Control
%       b. All experiments
%   9. RhoGTPAses analysis

flags.kdEfficiency = 1;
flags.correctMicroscopeError = 0;
flags.visualizePCs = 1;
flags.geneAnalysis = 0;
flags.corrPCsHealingRate = 0;
flags.metaDayAnalysis = 1;
flags.shearStrainAnalysis = 0;
flags.RhoGTPAsesAnalysis = 0;



%% 1. KD efficiency
% Statistics of KD efficiency of all sh-sequences
if flags.kdEfficiency
    whMetaKnockdownEfficiency(metaData,strLabels,dirs.hairpinEfficiencyDir);
end

%% 2. Statistics (printouts) of correction microscope repeat errors
if flags.correctMicroscopeError
    whMetaMicrscopeRepeatCorrectionStats(metaData,correctMotionDir);
end

%% 3. Extract high-dimensional features from the data
%       a. Segragate control data
%       b. PCA on control data
%       c. use coefficients to calculate PCA for all data
allFeatsFname = [workdir '/allSpatiotemporalFeatures.mat'];
reuseFeats = true; 

if exist(allFeatsFname,'file') && reuseFeats
    load(allFeatsFname);
else
    allFeatures = extractSpatiotemporalFeatures2016(workdir,metaData);
    % TODO: normalize/standardize features?? B = (A - repmat(AMean,[n 1])) ./ repmat(AStd,[n 1])
    cntrlPCA = extractSpatiotemporalPCA2016(allFeatures, strLabels); % based solely on control experiments
    % TODO: calculate PCA for all experiments in the screen
    %     screenPCA = coeffSpatiotemporalPCA2016(allFeatures,cntrlPCA);
    % %     save(allFeatsFname,'allFeatures','cntrlPCA','screenPCA');
end

% Excluded:
% associations = spatioTemporalAssociations(allFeatures,strLabels,workdir,timePerFrame);
% out = pcaFeatures(allFeatures,metaData,strLabels,workdir); % includes
% subjective clustering and plots genes (withour partitioning to different
% haripins)


%%   4. Visualize PCs
if flags.visualizePCs
    close all;
    visualizePCoefficients2016(cntrlPCA,metaData.timePartition,metaData.spatialPartition,dirs.pcaCoeff);
end


return;
%% UP TO HERE. FIRST THING MAKE SURE PCA WORKS FOR ALL DATA!!!


%%  5. Gene abalysis (not day as atomic unit)
if flags.geneAnalysis
    close all;
    % % DOES NOT USE DAILY CONTROLS!
    % geneVsControl(out,strLabels,metaData,workdir);
    
    % For each gene & day plot all sh-seqences + control
    geneAnalysis(out,strLabels,metaData,workdir);% gene x 3 shRNAs, Control, pSup of the same gene (defined by day), BetaPIX & ARHGEF12 as reference points
    
    
    % similar to geneAnalysis just not using the sh-sequences
    dayAnalysisControl(out,strLabels,metaData,workdir);
    
    % % same as dayAnalysisControl? Why is it commented out?
    % dayAnalysisGene(out,strLabels,metaData,workdir);
end

%%  6. Correlate PCs of each measure to wound healing rate
if flags.corrPCsHealingRate
    % Correlates PC1 to monolayer speed (same for PC2)
    close all;
    healingRateAnalysis(out,metaData,workdir);
end

%%  7. Meta day analysis
if flags.metaDayAnalysis
    whMetaDayAnalysis(allFeatures,out.healingRate,strLabels,metaData,workdir);
end

%%  8. Shear strain analysis: correlation shear strain events and motion
%       a. CDC42 vs. Control
%       b. All experiments
if flags.shearStrainAnalysis
    try
        [p,x0,x1] = whShearStrainCntrlCdc42(metaData,workdir); % motion-shear strain for all controls + CDC42
        whMotionShearStrainGeneDaySeq(metaData,workdir,p,x0,x1);
    catch exception
    end
end

%%  9. RhoGTPAses analysis
if flags.RhoGTPAsesAnalysis
    close all;
    % TODO: implement this
    RhoGTPasesAnalysis(out,metaData,RhoGTPasesDir);
end

% TODO? take pooled correlations (for each well) between the control and
% the KD phenotype
end


%%
function [] = geneAnalysis(out,strLabels,metaData,workdir)
geneAnalysisProperty(out.speed,strLabels,metaData,workdir,'Speed',out.axesSpeed);
geneAnalysisProperty(out.directional,strLabels,metaData,workdir,'Directionality',out.axesDirectionality);
% geneAnalysisProperty(out.strainRate,strLabels,metaData,workdir,'StrainRate',out.axesStrainRate);
geneAnalysisProperty(out.coordination,strLabels,metaData,workdir,'Coordination',out.axesCoordination);
close all;
end


% TODO: upadte to show NT distinctly from pSup (now they are combined)
function [] = geneAnalysisProperty(data,strLabels,metaData,workdir,propertyStr,newAxes)
close all;
fontsize = 24;

uniqueGenes = whGetUniqueGeneLabels(strLabels);
N = length(uniqueGenes);

strPSup = 'pSuper';
strNT = 'NT';
strDMSO = 'DMSO';
indsPSup = strcmp(whToPrefix(strLabels),strPSup) | strcmp(whToPrefix(strLabels),strNT) | strcmp(whToPrefix(strLabels),strDMSO); % then filter by days for the gene

markersPerm ='sdh';

nDays = length(metaData.groupsByDays);

for day = 1 : nDays
    indsDay = false(1,length(indsPSup));
    indsDay(metaData.groupsByDays{day}.inds) = true;
    strDay = metaData.groupsByDays{day}.dates;
    for gene = 1 : N
        
        if strcmp(uniqueGenes{gene},strPSup) || strcmp(uniqueGenes{gene},strNT)
            continue;
        end
        
        indsGene = strcmp(whToPrefix(strLabels),uniqueGenes{gene});
        %         indsDates = getDatesInds(metaData,indsGene);
        
        indsPSup1 = indsPSup & indsDay;
        indsGene = indsGene & indsDay;
        
        if sum(indsPSup1) < 2
            continue;
        end
        
        if sum(indsGene) < 3
            continue;
        end
        
        [seqStr, seqInds] = whGetSequencesStr(strLabels,uniqueGenes{gene});
        
        h = figure;
        xlabel('1st PC','FontSize',fontsize);
        ylabel('2nd PC','FontSize',fontsize);
        hold on;
        
        plot(data.score(indsPSup1,1)',data.score(indsPSup1,2)','o','MarkerEdgeColor','k','LineWidth',2,'MarkerSize',8,'DisplayName',strPSup);
        
        shSerialNumber = 0;
        for seq = 1 : length(seqStr)
            seqIndsDay = seqInds{seq};
            seqIndsDay = seqIndsDay & indsGene;
            if sum(seqIndsDay) == 0
                continue;
            end
            shSerialNumber = shSerialNumber + 1;
            depletionRateStr = num2str(metaData.KD{find(seqIndsDay,1)}); % to debug
            seqStrStr = seqStr{seq}; seqStrStr = seqStrStr(2:end-1);
            legendStr = [uniqueGenes{gene} '_{' seqStrStr ' (' depletionRateStr ')}'];            
            plot(data.score(seqIndsDay,1)',data.score(seqIndsDay,2)',sprintf('%s',markersPerm(shSerialNumber)),'MarkerEdgeColor','b','LineWidth',2,'MarkerSize',8,'DisplayName',legendStr);
        end
        
        haxes = get(h,'CurrentAxes');
        axis(newAxes);
        set(haxes,'FontSize',fontsize);
        legend('Location','EastOutside');
        set(h,'Color','none');
        %         position = get(h,'position');
        %         set(h,'position',[position(1:2) round(1.2*position(3:4))]);
        %
        pcaFname = [workdir 'pca/gene/' propertyStr 'PCA_Gene_' uniqueGenes{gene} '_' strDay '_shSeq.eps'];
        export_fig(pcaFname);
        
        hold off;
        close all;
    end
end
end

function [indsDates] = getDatesInds(metaData,indsGene)
N = length(indsGene);
inds = find(indsGene);
n = length(inds);

indsDates = false(1,N);
for i = 1 : n
    date = num2str(metaData.dates{inds(i)});
    tmp = false(1,N);
    for j = 1 : N
        if strcmp(date,num2str(metaData.dates{j}))
            tmp(j) = true;
        end
    end
    indsDates = indsDates | tmp;    
end
end

%% Day analysis control

function [] = dayAnalysisControl(out,strLabels,metaData,workdir)
dayAnalysisControlProperty(out.speed,strLabels,metaData,workdir,'Speed',out.axesSpeed);
dayAnalysisControlProperty(out.directional,strLabels,metaData,workdir,'Directionality',out.axesDirectionality);
dayAnalysisControlProperty(out.strainRate,strLabels,metaData,workdir,'StrainRate',out.axesStrainRate);
dayAnalysisControlProperty(out.coordination,strLabels,metaData,workdir,'Coordination',out.axesCoordination);
close all;
end


% TODO: deal with NT independent of pSup
function [] = dayAnalysisControlProperty(data,strLabels,metaData,workdir,propertyStr,newAxes)
close all;

fontsize = 24;

N = length(metaData.groupsByDays);
n = length(strLabels);

strPSup = 'pSuper';
strNT = 'NT';
strDMSO = 'DMSO';
indsPSup = strcmp(whToPrefix(strLabels),strPSup) | strcmp(whToPrefix(strLabels),strNT) | strcmp(whToPrefix(strLabels),strDMSO); % then filter by days for the gene

for day = 1 : N
    dayStr = metaData.groupsByDays{day}.dates;
    daysInds = metaData.groupsByDays{day}.inds;
    indsDay = false(1,n);
    indsDay(daysInds) = true;
    indsPSup1 = indsPSup & indsDay;
    
    if sum(indsPSup1) < 3
        continue;
    end        
    
    
    % Now add the gene for that day (make sure there is only 1 of those)
    indsGenes = indsDay & ~indsPSup;
    
    if sum(indsGenes) < 4
        continue;
    end
    
    genesStr = metaData.treatment(indsGenes);
    
    geneStr = unique(whToPrefix(genesStr));
    
    for igene = 1 : length(geneStr)
        curGeneStr = geneStr{igene};
        indsGene = strcmp(whToPrefix(strLabels),curGeneStr);
        indsGene = indsGene & indsDay;
        
        h = figure;
        xlabel('PC 1','FontSize',fontsize);
        ylabel('PC 2','FontSize',fontsize);
        hold on;
        plot(data.score(indsPSup1,1)',data.score(indsPSup1,2)','ok','MarkerEdgeColor','k','LineWidth',3,'MarkerSize',10,'DisplayName',strPSup);        
        plot(data.score(indsGene,1)',data.score(indsGene,2)','ob','MarkerEdgeColor','b','LineWidth',3,'MarkerSize',10,'DisplayName',curGeneStr);
        legend show;        
    
        
        haxes = get(h,'CurrentAxes');
        axis(newAxes);
        set(haxes,'FontSize',fontsize);
        set(h,'Color','none');                        
               
        pcaFname = [workdir 'pca/dayGene/' propertyStr 'PCA_Gene_' curGeneStr '_Day_' dayStr '.eps'];
        export_fig(pcaFname);
        
        hold off;
    end
              
    close all;        
end
end


%% Day analysis gene - compares gene to that day's control

% function [] = dayAnalysisGene(out,strLabels,metaData,workdir)
% dayAnalysisGeneProperty(out.speed,strLabels,metaData,workdir,'Speed',out.axesSpeed);
% dayAnalysisGeneProperty(out.directional,strLabels,metaData,workdir,'Directionality',out.axesDirectionality);
% dayAnalysisGeneProperty(out.strainRate,strLabels,metaData,workdir,'StrainRate',out.axesStrainRate);
% dayAnalysisGeneProperty(out.coordination,strLabels,metaData,workdir,'Coordination',out.axesCoordination);
% close all;
% end


% TODO: update by day
% function [] = dayAnalysisGeneProperty(data,strLabels,metaData,workdir,propertyStr,newAxes)
% close all;
% 
% N = length(metaData.groupsByDays);
% n = length(strLabels);
% 
% strPSup = 'pSuper';
% indsPSup = strcmp(whToPrefix(strLabels),strPSup); % then filter by days for the gene
% 
% for day = 1 : N
%     dayStr = metaData.groupsByDays{day}.dates;
%     daysInds = metaData.groupsByDays{day}.inds;
%     indsDay = false(1,n);
%     indsDay(daysInds) = true;
%     indsPSup1 = indsPSup & indsDay;
%     
%     if sum(indsPSup1) < 2
%         continue;
%     end
%     
%     indsGenes = indsDay & ~indsPSup;
%     
%     if sum(indsGenes) < 4
%         continue;
%     end
%     
%     genesStr = metaData.treatment(indsGenes);
%     
%     geneStr = unique(whToPrefix(genesStr));        
%     
%     nGene = length(geneStr);
%     
%     for curGene = 1 : nGene
%         
%     end
%     
%     h = figure;
%     xlabel('1st PC','FontSize',16);
%     ylabel('2nd PC','FontSize',16);
%     hold all;
%     
%     
%     plot(data.score(indsPSup1,1)',data.score(indsPSup1,2)','ob','MarkerFaceColor','b','MarkerEdgeColor','k','MarkerSize',8,'DisplayName',strPSup);
%     
%         
%     haxes = get(h,'CurrentAxes');
%     axis(newAxes);
%     set(haxes,'FontSize',16);
%     
%     legend show;
%     set(h,'Color','none');
%     position = get(h,'position');
%     set(h,'position',[position(1:2) round(1.2*position(3:4))]);    
%     hold off;
%     
%     pcaFname = [workdir 'pca/day/' propertyStr 'PCA_Day_' dayStr '.jpg'];
%     eval(sprintf('print -djpeg %s', pcaFname));
%     
%     % Now add the gene for that day (make sure there is only 1 of those)
%     indsGenes = indsDay & ~indsPSup;
%     
%     if sum(indsGenes) == 0
%         continue;
%     end
%     
%     genesStr = metaData.treatment(indsGenes);
%     
%     geneStr = unique(whToPrefix(genesStr));
%     
%     colors = 'mcky';
%     for igene = 1 : length(geneStr)
%         curGeneStr = geneStr{igene};
%         indsGene = strcmp(whToPrefix(strLabels),curGeneStr);
%         indsGene = indsGene & indsDay;
%         
%         hold all;
%         legend off;
%         % find the gene and plot it
%         hg = plot(data.score(indsGene,1)',data.score(indsGene,2)',sprintf('o%s',colors(igene)),'MarkerFaceColor',sprintf('%s',colors(igene)),'MarkerEdgeColor','k','MarkerSize',12,'DisplayName',curGeneStr);
%         legend show;
%         hold off;
%     
%         pcaFname = [workdir 'pca/dayGene/' propertyStr 'PCA_Day_' dayStr '_Gene_' curGeneStr '.jpg'];
%         eval(sprintf('print -djpeg %s', pcaFname));
%         set(hg,'Visible','off');
%     end
%     
%     close all;        
% end
% end

%% Healing rate analysis
function [] = healingRateAnalysis(data,metaData,workdir) % data.speed, data.healingRate
h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC1','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.speed.score(i,1),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA1Fname = [workdir 'healingRate/analysis/healingRateVsSpeedPC1.eps'];
export_fig(healingRatePCA1Fname);

h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC2','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.speed.score(i,2),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA1Fname = [workdir 'healingRate/analysis/healingRateVsSpeedPC2.eps'];
export_fig(healingRatePCA1Fname);

h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC3','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.speed.score(i,3),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA3Fname = [workdir 'healingRate/analysis/healingRateVsSpeedPC3.eps'];
export_fig(healingRatePCA3Fname);


% Directionality
h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC1','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.directional.score(i,1),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA1Fname = [workdir 'healingRate/analysis/healingRateVsDirectionalityPC1.eps'];
export_fig(healingRatePCA1Fname);

h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC2','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.directional.score(i,2),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA2Fname = [workdir 'healingRate/analysis/healingRateVsDirectionalityPC2.eps'];
export_fig(healingRatePCA2Fname);

h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC3','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.directional.score(i,3),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA3Fname = [workdir 'healingRate/analysis/healingRateVsDirectionalityPC3.eps'];
export_fig(healingRatePCA3Fname);

% Coordination
h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC1','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.coordination.score(i,1),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA1Fname = [workdir 'healingRate/analysis/healingRateVsCoordinationPC1.eps'];
export_fig(healingRatePCA1Fname);

h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC2','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.coordination.score(i,2),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA1Fname = [workdir 'healingRate/analysis/healingRateVsCoordinationPC2.eps'];
export_fig(healingRatePCA1Fname);

h = figure;
xlabel('Healing rate (\mum hour{-1})','FontSize',28);
ylabel('PC3','FontSize',28);
hold all;
for i = 1 : metaData.N
    plot(data.healingRate(i),data.coordination.score(i,3),'ok','MarkerFaceColor','r','MarkerSize',8);
end
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',28);
set(h,'Color','none');
% position = get(h,'position');
% set(h,'position',[position(1:2) round(1.2*position(3:4))]);
hold off;
healingRatePCA3Fname = [workdir 'healingRate/analysis/healingRateVsCoordinationPC3.eps'];
export_fig(healingRatePCA3Fname);

% Distribution
[nelements,centers] = hist(data.healingRate,20); 
healingRateDistribution = nelements./sum(nelements);
plotAlignmentAngleDistribution(healingRateDistribution,centers,[workdir 'healingRate/analysis/healingRateDistribution.eps']);
end

function [] = plotAlignmentAngleDistribution(distribution,centers,outFname)
h = figure;
hold on;
bar(centers,distribution,'r');
xlabel('Healing rate (\mum hour{-1})','FontSize',22);
ylabel('Percent','FontSize',22);
haxes = get(h,'CurrentAxes');
% set(haxes,'XLim',[0,90]);
% set(haxes,'XTick',0:45:90);
% set(haxes,'XTickLabel',0:45:90);
% set(haxes,'YLim',[0,0.4]);
% set(haxes,'YTick',0:0.1:0.4);
% set(haxes,'YTickLabel',0:0.1:0.4);
set(haxes,'FontSize',22);
set(h,'Color','none');
hold off;
export_fig(outFname);
end



%%
function [] = RhoGTPasesAnalysis(out,metaData,workdir)
nDays = length(metaData.groupsByDays);
inds = [];
for i = 1 : nDays 
    if strcmp(metaData.groupsByDays{i}.dates,'20150401') || strcmp(metaData.groupsByDays{i}.dates,'20150402')
        inds = [inds metaData.groupsByDays{i}.inds];
    end
end
treatments = metaData.treatment(inds);
uniqueTreatments = unique(treatments);
nTreats = length(uniqueTreatments);
indsTreats = cell(1,nTreats);
for i = 1 : nTreats
    indsTreats{i} = inds(strcmp(uniqueTreatments{i},treatments));
end

plotRhoGTPasesPCA(out.speed,uniqueTreatments,indsTreats,workdir,'Speed');
plotRhoGTPasesPCA(out.directional,uniqueTreatments,indsTreats,workdir,'Directionality');
plotRhoGTPasesPCA(out.coordination,uniqueTreatments,indsTreats,workdir,'Coordination');
end

function [] = plotRhoGTPasesPCA(data,treatsStr,treatsInds,dirname,measureStr)

close all;

nTreats = length(treatsStr);
colorsPerm = 'mkbcr';

%% PC1 vs. PC2
h = figure;
xlabel('PC1','FontSize',15);
ylabel('PC2','FontSize',15);
hold all;
for i = 1 : nTreats
    inds = treatsInds{i};    
    plot(data.score(inds,1)',data.score(inds,2)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(i)),'MarkerSize',10,...
        'DisplayName',treatsStr{i});    
end
legend('Location','southwest');
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',32);

xlim = get(haxes,'XLim');
ylim = get(haxes,'YLim');
newAxes = [xlim, ylim];

pcaFname = [dirname measureStr 'PCA_legend.jpg'];
eval(sprintf('print -djpeg %s', pcaFname));

legend off;

hold off;

pcaFname = [dirname measureStr 'PCA12.jpg'];
eval(sprintf('print -djpeg %s', pcaFname));

%% PC1 vs. PC3
h = figure;
xlabel('PC1','FontSize',15);
ylabel('PC3','FontSize',15);
hold all;
for i = 1 : nTreats
    inds = treatsInds{i};    
    plot(data.score(inds,1)',data.score(inds,3)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(i)),'MarkerSize',10,...
        'DisplayName',treatsStr{i});    
end

haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',32);

xlim = get(haxes,'XLim');
ylim = get(haxes,'YLim');
newAxes = [xlim, ylim];


hold off;

pcaFname = [dirname measureStr 'PCA13.jpg'];
eval(sprintf('print -djpeg %s', pcaFname));
%%

cdc42DiffScore =  data.score(treatsInds{1},:) - repmat(mean(data.score(treatsInds{5},:)),size(data.score(treatsInds{1},:),1),1);
rac1DiffScore = data.score(treatsInds{3},:) - repmat(mean(data.score(treatsInds{2},:)),size(data.score(treatsInds{3},:),1),1);
rhoaDiffScore = data.score(treatsInds{4},:) - repmat(mean(data.score(treatsInds{2},:)),size(data.score(treatsInds{4},:),1),1);

%% PC1 vs. PC2
h = figure;
xlabel('PC1 (KD - control)','FontSize',15);
ylabel('PC2 (KD - control)','FontSize',15);
hold all;

plot(cdc42DiffScore(:,1)',cdc42DiffScore(:,2)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(1)),'MarkerSize',10,'DisplayName',treatsStr{1});
plot(rac1DiffScore(:,1)',rac1DiffScore(:,2)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(3)),'MarkerSize',10,'DisplayName',treatsStr{3});
plot(rhoaDiffScore(:,1)',rhoaDiffScore(:,2)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(4)),'MarkerSize',10,'DisplayName',treatsStr{4});

legend('Location','southwest');
haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',32);

xlim = get(haxes,'XLim');
ylim = get(haxes,'YLim');
newAxes = [xlim, ylim];

pcaFname = [dirname measureStr 'PCADiff_legend.jpg'];
eval(sprintf('print -djpeg %s', pcaFname));

legend off;

hold off;

pcaFname = [dirname measureStr 'PCADiff12.jpg'];
eval(sprintf('print -djpeg %s', pcaFname));

%% PC1 vs. PC3
h = figure;
xlabel('PC1 (KD - control)','FontSize',15);
ylabel('PC3 (KD - control)','FontSize',15);
hold all;
plot(cdc42DiffScore(:,1)',cdc42DiffScore(:,3)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(1)),'MarkerSize',10,'DisplayName',treatsStr{1});
plot(rac1DiffScore(:,1)',rac1DiffScore(:,3)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(3)),'MarkerSize',10,'DisplayName',treatsStr{3});
plot(rhoaDiffScore(:,1)',rhoaDiffScore(:,3)','ok','MarkerFaceColor',sprintf('%s',colorsPerm(4)),'MarkerSize',10,'DisplayName',treatsStr{4});

haxes = get(h,'CurrentAxes');
set(haxes,'FontSize',32);

xlim = get(haxes,'XLim');
ylim = get(haxes,'YLim');
newAxes = [xlim, ylim];


hold off;

pcaFname = [dirname measureStr 'PCA13Diff.jpg'];
eval(sprintf('print -djpeg %s', pcaFname));

end