classdef NoiseEstimationProcess < ImageAnalysisProcess
    % Concrete class of a process for calibrating a model of noise
    %
    % Sebastien Besson, 5/2011
    
    methods
        function obj = NoiseEstimationProcess(owner,varargin)
            
            if nargin == 0
                super_args = {};
            else
                % Input check
                ip = inputParser;
                ip.addRequired('owner',@(x) isa(x,'MovieData'));
                ip.addOptional('outputDir',owner.outputDirectory_,@ischar);
                ip.addOptional('funParams',[],@isstruct);
                ip.parse(owner,varargin{:});
                outputDir = ip.Results.outputDir;
                funParams = ip.Results.funParams;
                
                % Define arguments for superclass constructor
                super_args{1} = owner;
                super_args{2} = NoiseEstimationProcess.getName;
                super_args{3} = @calculateMovieNoiseParam;
                if isempty(funParams)
                    funParams = NoiseEstimationProcess.getDefaultParams(owner,outputDir);
                end
                super_args{4} = funParams;
            end
            
            obj = obj@ImageAnalysisProcess(super_args{:});
            
        end
        
        function sanityCheck(obj)
            sanityCheck@ImageAnalysisProcess(obj);
            
            if 2*max(2*obj.funParams_.filterSigma+1)>min(obj.funParams_.cropROI(1,3:4))
                errordlg(['The intensity drop at the borders generated by the filtering biases pixel intensities'...
                    'throughout the whole image. Please select larger image or smaller sigma.']);
                return;
            end
            
            nChan = numel(obj.owner_.channels_);
            if isempty(obj.funParams_.ChannelIndex) || max(obj.funParams_.ChannelIndex) > nChan...
                    || min(obj.funParams_.ChannelIndex)<1 ||...
                    ~isequal(round(obj.funParams_.ChannelIndex),obj.funParams_.ChannelIndex)
                error('Invalid channel numbers specified! Check ChannelIndex input!!')
            end
        end
        
        function status = checkChannelOutput(obj,iChan)
            
            %Checks if the selected channels have valid output files
            nChan = numel(obj.owner_.channels_);
            if nargin < 2, iChan = 1:nChan; end
 
            %Makes sure there's at least one .mat file in the speified
            %directory
            status= arrayfun(@(x) exist(obj.outFilePaths_{1,x},'file'),iChan);
        end
        
        
        function varargout = loadChannelOutput(obj,iChan,varargin)
            
            % Input check
            outputList = {'I0','sDN','GaussRatio'};
            ip =inputParser;
            ip.addRequired('iChan',@(x) isscalar(x) && obj.checkChanNum(x));
            ip.addParamValue('output',outputList,@(x) all(ismember(x,outputList)));
            ip.parse(iChan,varargin{:})
            output = ip.Results.output;
            if ischar(output), output={output}; end
            
            s =load(obj.outFilePaths_{1,iChan},output{:});
            % Initialize output
            for j=1:numel(output)
                varargout{j} = s.(output{j});
            end
        end
    end
    methods (Static)
        function name = getName()
            name ='Noise Model Calibration';
        end
        function h = GUI()
            h= @noiseEstimationProcessGUI;
        end
        
        function funParams = getDefaultParams(owner,varargin)
            % Input check
            ip=inputParser;
            ip.addRequired('owner',@(x) isa(x,'MovieData'));
            ip.addOptional('outputDir',owner.outputDirectory_,@ischar);
            ip.parse(owner, varargin{:})
            outputDir=ip.Results.outputDir;
            
            % Set default parameters
            funParams.ChannelIndex = 1 : numel(owner.channels_);
            funParams.OutputDirectory = [outputDir  filesep 'noise'];
            funParams.firstImage = ones(size(owner.channels_));
            funParams.lastImage = owner.nFrames_*ones(size(owner.channels_));
            funParams.cropROI = [1 1 owner.imSize_(end:-1:1)];
            psfSigmaCheck =~arrayfun(@(x)isempty(x.psfSigma_),owner.channels_);
            if all(psfSigmaCheck)
                funParams.filterSigma = [owner.channels_.psfSigma_];
            else
                funParams.filterSigma = zeros(size(owner.channels_));
            end
        end
    end
end