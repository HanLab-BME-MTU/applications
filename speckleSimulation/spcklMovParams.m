function [frmMeanI,fluorData,params] = spcklMovParams
% SPCKLMOVPARAMS simulates actin, actin/adhesion, and antiparallel microtubules

% Please save a re-named version of this function for yourself so you can
% change parameters and rate constants according to your needs.  The
% default values shown here should work for all models on a Linux machine.

% This package generates images based on several Monte Carlo simulations.
% Current models supported are 1) stationary actin with optional diffusion
% and user-set rate constants for switching between G-actin and F-actin; 2)
% converging actin flow with depoly such that image intensity remains
% constant; 3) creation of dual-channel movies for actin/adhesion
% interactions (see Hu et al. Science 2007), where there is uniform flow,
% user-set rate constants, and optional diffusion; and 4) movement of
% antiparallel microtubule bundles and individual microtubules.
%
% INPUT: make sure to change the imaging and model-specific parameters in
%        this function. if you want to change the beginning state
%        distributions, check spcklMovMain (see model-specific notes below
%        for what state distributions mean, since states differ between
%        models. NOTE: in all models, fluorophores in state 0 do not
%        contribute to image signal.)
%
% OUTPUT: frmMeanI : average image intensity per frame (may be meaningless)
%         fluorData: contains nm- and pixel-coordinates for each
%                    fluorophore, as well as the state and whether the
%                    fluorophore was in the image (i.e. not on the
%                    cropped-off border) for each time-step used to create
%                    the image (i.e. if dT is 0.1s and the camera exposure
%                    time is 0.3s, we record data only for the 3 time steps
%                    contributing to the frame, not for the other time
%                    steps that are generated by the model between frames.
%        params    : parameters from this function as well as others
%                    calculated according to the model
%        these outputs are saved in the movieInfo folder generated by the
%        simulation.  output images are located in images/tifs. currently
%        an analysis folder with a folder for cell masks is created but not
%        filled; use the roipoly function or equivalent to generate masks!

% FOR ALL MODELS ---------------------------
% 1 Stationary network
% 2 Converging network
% 3 Flowing actin (one color) or actin/adhesion (two colors)
% 4 Antiparallel microtubules in bundles
params.nModel = 1;    % model number

% movie parameters
params.imL          = 256;  % image length
params.imW          = 256;  % image width
params.nFrames      = 5;   % number of frames to produce
params.nSecPerFrame = 2;    % frame rate (seconds)
params.intTime      = 0.3;  % exposure time (seconds)
params.dT           = 0.1;  % time between steps (seconds)

% imaging parameters
params.lambdaEmit = 488;    % emission wavelength (nm)
params.na         = 1.45;   % numerical aperture
params.pixNM      = 67;     % real space pixel size (nm)

% size of box used to bin fluorophores - don't change
params.sampleScale=floor(params.pixNM/3);   

switch params.nModel
    case 1 % Stationary network, random poly/depoly
        
        % the "state" of each fluorophore is initially set in spcklMovMain,
        % where half begin in the unbound state (G-actin). unbound monomers
        % do not contribute to signal, so the total fluorophores generating
        % signal in this case will be on average half the labeled fraction.
        % the number will go up or down till steady state is reached based
        % on the kinetics.
        
        % be aware that the border used to make the images might not be big
        % enough if the diffusion constant is high.  check the images to
        % see if there is substantial intensity variation at the borders after
        % running it.  you can adjust the borders in spcklMovCalcBorder.
        % also be aware that all particles are undergoing the same diffusion
        % regardless of whether they are bound or unbound.
        
        % actin filaments density (microns/microns^2)
        params.areaDens = 278; % calculated to be 278 by Abraham et al 1999
        
        % the fraction of labeled subunits (multiply by 100 to get percent)
        params.percentLabeledActin = 0.01;
        
        % diffusion constant D (cm^2/s), 0 if no diffusion
        % (D=10^-9 is approx. free protein diffusion in a membrane)
        params.D = 10^-17;

        % rate constants
        params.k01=0.05; % kon,  G-actin to F-actin rate
        params.k10=0.05; % koff, F-actin to G-actin rate
        
    case 2 % Converging network
        
        % for this model there is no polymerization and no diffusion
        % (though this could be added in the future). if params.depoly is
        % set to 1, depolymerization occurs at a rate proportional to how
        % far each fluorophore is from the sink (located at params.poleYX).
        % this makes the image intensity uniform everywhere despite massive
        % depoly at the sink.  because there is no poly, we start with all
        % the fluorophores labeled (state = 1), set in spcklMovMain.m.
        % this allows you to have a lower labeled fraction, which is
        % important for memory limitations, since the borders have to be
        % bigger to accomodate inward flow over the image edge.
        
        % actin filaments density (microns/microns^2)
        params.areaDens = 278; % calculated to be 278 by Abraham et al 1999
        
        % the fraction of labeled subunits (multiply by 100 to get percent)
        params.percentLabeledActin = 0.001;
        
        % [y0 x0] coordinates of the pole (sink) in pixels
        % use [] to center pole in the image
        params.poleYX=[];

        % if depoly=1, depoly occurs so that avg intensity stays constant as
        % convergence occurs. if depoly=0, no depoly occurs and the image gets
        % brighter near the pole.
        params.depoly=1;
        
        % velocity in microns/min
        params.umPerMinFlowSpeed = 3.2;

        % here we calculate flow rate in pixels per frame
        params.pixPerFrame=(1000/60)*params.umPerMinFlowSpeed*(params.nSecPerFrame/params.pixNM);

    case 3 % actin (one color) or actin/adhesion (two colors) flow in one direction

        % to make a one-color movie of just actin, make params.protein=1
        % and change actin params below. this is essentially the same as
        % running model 1 but you have the option of flow (and states are 0
        % and 2 instead of 0 and 1).
        
        % to make a two-color movie of actin and adhesions, run first with
        % params.protein=1 (actin) and then run again with params.protein=2
        % (adhesion). we essentially treat the adhesion proteins as if they 
        % were actin, but now there are more dynamic states.  actin
        % monomers can only exist in two states (0 or 2), while adhesion
        % proteins can exist in four (0, 1, 2, or 3).  The state
        % designation corresponds to the following:
        % 0: unbound
        % 1: bound to substrate (stationary)
        % 2: bound to actin (moving with actin flow speed)
        % 3: bound to both actin and substrate (moving at half the actin
        %    flow speed)
        
        params.protein = 1; % 1 for actin, 2 for adhesion
        
        if params.protein==1 % ACTIN
            
            % RATE CONSTANTS
            params.k02=0.05; % kon,  G-actin to F-actin rate
            params.k20=0.05; % koff, F-actin to G-actin rate
            
            % INITIAL STATE DISTRIBUTIONS
            % when modeling actin, we assume half the fluorophores are
            % bound and half are unbound.  you can change
            % this in spcklMovMain.m if desired.
            
        end
        if params.protein==2 % ADHESION
            
            % RATE CONSTANTS
            % index note: eg) k10 is rate constant from switching from
            % substrate-bound to unbound (diffuse)
            % 0=unbound (neither), 1=substrate, 2=actin, 3=both substrate and actin

            % kOFF from all states to unbound
            params.k10=0.02;
            params.k20=0.02;
            params.k30=0.00; % keep zero, can't go from bound to both to bound to neither in one step

            % kON from all states to substrate bound
            params.k01=0.02;
            params.k21=0.00;
            params.k31=0.02;

            % kON from all states to actin bound
            params.k02=0.02;
            params.k12=0.00;
            params.k32=0.02;

            % kON from all states to substrate and actin bound
            params.k03=0.00; % keep zero, can't go from bound to neither to bound to both in one step
            params.k13=0.02;
            params.k23=0.02;

            % INITIAL STATE DISTRIBUTIONS
            % if modeling adhesion (params.protein=2), you can choose your
            % initial distribution of states
            % 1: all unbound
            % 2: all bound to substrate
            % 3: all bound to actin
            % 4: all bound to both substrate and actin
            % 5: random even distribution of monomers in the four states
            % 6: don't allow binding to both substrate and actin simultaneously
            % (no state 3), states distributed equally between 0, 1, and 2
            params.stateDist = 6;
            
        end

        % be aware that the border used to make the images might not be big
        % enough if the diffusion constant is high.  check the images to
        % see if there is substantial variation at the borders after
        % running it.  you can adjust the borders in spcklMovCalcBorder.
        % also be aware that all particles are undergoing the same diffusion
        % regardless of whether they are bound or unbound.
        
        % actin filaments density (microns/microns^2)
        params.areaDens = 278; % calculated to be 278 by Abraham et al 1999
        
        % the fraction of labeled subunits (multiply by 100 to get percent)
        params.percentLabeledActin = 0.01;
        
        % diffusion constant D (cm^2/s), 0 if no diffusion
        % (D=10^-9 is approx. free protein diffusion in a membrane)
        params.D = 0;
        
        % velocity in microns/min
        params.umPerMinFlowSpeed = 3.2;     

        % angle in degrees for flow direction (0 is left-to-right, 45 is
        % top-left to bottom-right, etc.)
        params.theta = 0;                   
        
        % here we calculate flow rate in pixels per frame
        params.pixPerFrame=(1000/60)*params.umPerMinFlowSpeed*(params.nSecPerFrame/params.pixNM);
        
    case 4 % Antiparallel microtubules in bundles

        % here we model alternating bundles and individual microtubules
        % moving in random directions. we assume two populations of MTs
        % distinguished by different velocity distributions. the initial
        % positions of fluorophores is generated differently than for
        % models 1-3 but are still calculated by spckleMovGenFluor.
        
        % mean and sigma for 2 populations of MTs, one fast and one slow
        % (microns/min)
        params.fastFlowMean = 4.8;
        params.fastFlowSigma = 0.3;
        params.slowSpeedMean = 2.3;
        params.slowSpeedSigma = 0.6;

        % labeled fraction of subunits in individual MTs
        params.fractionTuLabeled = 0.0004;
        
        % labeled fraction of subunits in bundle MTs
        params.effectiveLabeling = 5*params.fractionTuLabeled;
        
        % fraction from single MT population that move according to fast
        % distribution
        params.fractionFastSingleMTs = 0.50;

        % repeating geometry of parallel units of bundle-space-singleMT-space
        params.nPerBundle=5;    % num MTs in bundle
        params.nSpacers1=1;     % num MT-sized empty spaces between bundle and single MTs
        params.nSingles=1;      % num of single MTs (each has different speed)
        params.nSpacers2=2;     % num MT-sized empty spaces between single MTs and next bundle
       
    otherwise
        error('params.nModel value is incorrect');
end

% run the main function which sets up the directories and makes the movies
[frmMeanI,fluorData,params]=spcklMovMain(params);
