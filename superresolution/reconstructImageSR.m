function [imageSupRes,factorSub,imageConv] = reconstructImageSR(movieInfo,...
    factorSub,useMedianStd,showConv,startend,cropImage,dir2saveRes,...
    firstImgFile,makeMovie,movieName,movieType)
%RECONSTRUCTIMAGESR reconstructs a "super-resolution" image from single molecule coordinates
%
%SYNPOSIS [imageSupRes,factorSub,imageConv] = reconstructImageSR(movieInfo,...
%    factorSub,useMedianStd,showConv,startend,cropImage,dir2saveRes,...
%    firstImgFile,makeMovie,movieName,movieType)
%
%INPUT  movieInfo   : Output of detectSubResFeatures2D_StandAlone.
%       factorSub   : Factor by which to sub-sample original pixels in
%                     reconstructed image.
%                     Optional. Default value calculated from positional
%                     standard deviation.
%       useMedianStd: 1 to use median standard deviation for all molecules
%                     for the sake of speed, 0 to use for each molecule its
%                     own standard deviation.
%                     Optional. Default: 0.
%       showConv    : 1 to show conventional image, 0 otherwise.
%                     Optional. Default: 0.
%       startend    : Row vector indicating first and last frame to
%                     use for reconstruction. Format: [startframe endframe].
%                     Optional. Default: [1 (maximum available frame)].
%       cropImage   : 1 to reconstruct only a cropped part of the
%                     original image, 0 to use the full image.
%                     Optional. Default: 0.
%       dir2saveRes : Directory where to save output.
%                     Optional. Default: Directory where images are located.
%       firstImgFile: Name (including full path) of the first image file
%                     in the image series. The file has to be the first 
%                     image that has been analyzed even if not used for
%                     reconstruction. 
%                     Optional. Default: User is prompted to select the
%                     first image.
%       makeMovie   : 1 to make and save a movie of the reconstruction, 0
%                     otherwise.
%                     Optional. Default: 0
%       movieName   : File name for saving movie.
%                     Optional. Default: ReconstructionMovie.
%       movieType   : 'mov' to make a Quicktime movie using MakeQTMovie,
%                     'avi' to make AVI movie using Matlab's movie2avi,
%                     'mp4_unix', 'avi_unix' to make an MP4 or AVI movie
%                     using ImageMagick and ffmpeg. These options works
%                     only under linux or mac.
%                     Optional. Default: 'mov'.
%
%OUTPUT imageSupRes : Reconstructed super-resolution image.
%       factorSub   : Factor by which original pixels are sub-sampled
%                     in reconstructed image. Same as input if supplied.
%       imageConv   : Conventional image, generated by adding up all
%                     individual images.
%
%Khuloud Jaqaman, August 2011

%% Output

imageSupRes = [];
imageConv = [];

%% Input

%check whether correct number of input arguments was used
if nargin < 1
    disp('--reconstructImageSR: Incorrect number of input arguments!');
    return
end

%get number of frames in movie
numFrames = length(movieInfo);

if nargin < 2
    factorSub = [];
end

if nargin < 3 || isempty(useMedianStd)
    useMedianStd = 0;
end

if nargin < 4 || isempty(showConv)
    showConv = 0;
end

if nargin < 5 || isempty(startend)
    startend = [1 numFrames];
elseif startend(2) > numFrames
    startend(2) = numFrames;
end

if nargin < 6
    cropImage = 0;
end

if nargin < 7
    dir2saveRes = [];
end

if nargin < 8 || isempty(firstImgFile)
    [fName,dirName] = uigetfile('*.tif','specify first image in the stack - specify very first image, even if not to be used');
else
    if iscell(firstImgFile)
        [fpath,fname,fno,fext]=getFilenameBody(firstImgFile{1});
        dirName=[fpath,filesep];
        fName=[fname,fno,fext];
    elseif ischar(firstImgFile)
        [fpath,fname,fno,fext]=getFilenameBody(firstImgFile);
        dirName=[fpath,filesep];
        fName=[fname,fno,fext];
    end
end

if(isa(fName,'char') && isa(dirName,'char'))
    
    %get all file names in stack
    outFileList = getFileStackNames([dirName,fName]);
    numFiles = length(outFileList);
    
    %determine which frames the files correspond to, and generate the inverse map
    %indicate missing frames with a zero
    frame2fileMap = zeros(numFiles,1);
    for iFile = 1 : numFiles
        [~,~,frameNumStr] = getFilenameBody(outFileList{iFile});
        frameNum = str2double(frameNumStr);
        frame2fileMap(frameNum) = iFile;
    end
    
else %exit if there are problems
    
    disp('--reconstructImageSR: Bad file selection');
    return
    
end

if isempty(dir2saveRes)
    dir2saveRes = dirName;
end

if nargin < 9 || isempty(makeMovie)
    makeMovie = 0;
end

if nargin < 10 || isempty(movieName)
    movieName = 'ReconstructionMovie';
end

if nargin < 11 || isempty(movieType)
    movieType = 'mov';
end

%% Pre-processing

%keep only the frames of interest
outFileList = outFileList(frame2fileMap(startend(1)):frame2fileMap(startend(2)));
frame2fileMap = frame2fileMap(startend(1):startend(2));
indxNotZero = find(frame2fileMap~=0);
frame2fileMap(indxNotZero) = frame2fileMap(indxNotZero) - frame2fileMap(indxNotZero(1)) + 1;

%retain only the movieInfo of the frames of interest
movieInfo = movieInfo(startend(1):startend(2));

%get number of frames in movie to be made
numFramesMovie = diff(startend) + 1;

%read first image, crop if requested and get image range
%image range is in normal spatial coordinates (i.e. not image coordinates)
currentImage = double(imread(outFileList{1}));
if cropImage
    currentImage = (currentImage-min(currentImage(:)))/(max(currentImage(:))-min(currentImage(:)));
    [~,rect] = imcrop(currentImage);
    close all
    rect = round(rect);
    %     figure, imshow(imageCropped)
    imageRange = [rect(2) rect(2)+rect(4); rect(1) rect(1)+rect(3)];
    %     figure, imshow(currentImage(imageRange(1,1):imageRange(1,2),imageRange(2,1):imageRange(2,2)))
else
    [isx,isy] = size(currentImage);
    imageRange = [1 isx; 1 isy];
end

%save image size in normal coordinates
numPixelsXY = diff(imageRange,[],2)' + 1;

%get positional standard deviations and their median
posStd = [vertcat(movieInfo.xCoord) vertcat(movieInfo.yCoord)];
medPosStd = median(mean(posStd(:,[2 4]),2));

%also get total number of molecules
numMolecules = size(posStd,1);

%if not supplied, determine the sub-sampling factor so that the
%minimum/median positional uncertainty = 1 new pixel
if isempty(factorSub)
    if useMedianStd
        minPosStd = medPosStd;
    else
        minPosStd = prctile(mean(posStd(:,[2 4]),2),10);
    end
    factorSub = round(1/minPosStd);
end

%thus get number of new pixels in reconstructed image (in normal coordinates)
numPixelsNewXY = numPixelsXY*factorSub;

%% Image reconstruction

%define some numbers for axes labeling in movie and final images
xTickConv = 1:100:numPixelsXY(2);
if length(xTickConv) == 1
    xTickConv = [1 numPixelsXY(2)];
end
yTickConv = 1:100:numPixelsXY(1);
if length(yTickConv) == 1
    yTickConv = [1 numPixelsXY(1)];
end
xTickSR = xTickConv*factorSub;
yTickSR = yTickConv*factorSub;
xTickName = cell(length(xTickConv),1);
yTickName = cell(length(yTickConv),1);
for i = 1 : length(xTickConv)
    xTickName{i} = num2str(xTickConv(i)+imageRange(2,1)-1);
end
for i = 1 : length(yTickConv)
    yTickName{i} = num2str(yTickConv(i)+imageRange(1,1)-1);
end

%generate Gaussian template for median std
medianSize = round(7*medPosStd*factorSub);
medianSize = medianSize + (1-mod(medianSize,2));
template = GaussMask2D(1,medianSize,[0 0]);
templateSize = (size(template,1) - 1) / 2;

%initialize conventional image
imageConv = zeros(numPixelsXY(1),numPixelsXY(2));

%initialize super-resolution image
imageSupRes = spalloc(numPixelsNewXY(1),numPixelsNewXY(2),...
    (medianSize^2)*numMolecules);

%initialize movie
if makeMovie
    movieVar = struct('cdata',[],'colormap',[]);
    movieVar = movieInfrastructure('initialize',movieType,dir2saveRes,...
        movieName,numFramesMovie,movieVar,[]);
    figure1 = figure;
end

%initialize progress text
progressText(0,'Reconstructing image');

%go over all specified frames
for iFrame = 1 : numFramesMovie
    
    %generate conventional image
    if showConv && frame2fileMap(iFrame) ~= 0 %if frame exists
        imageStack = double(imread(outFileList{frame2fileMap(iFrame)}));
        imageConv = imageConv + imageStack(imageRange(1,1):imageRange(1,2),...
            imageRange(2,1):imageRange(2,2));
    end
    
    %generate super-resolution image
    if ~isempty(movieInfo(iFrame).xCoord)
        
        %extract the molecule positions and their uncertainties
        xCoord = movieInfo(iFrame).xCoord;
        yCoord = movieInfo(iFrame).yCoord;
        
        %keep only the coordinates within the image range of interest
        indxKeep = find( xCoord(:,1)>=(imageRange(2,1)-0.5) & ...
            xCoord(:,1)<=(imageRange(2,2)+0.5) & ...
            yCoord(:,1)>=(imageRange(1,1)-0.5) & ...
            yCoord(:,1)<=(imageRange(1,2)+0.5) );
        xCoord = xCoord(indxKeep,:);
        yCoord = yCoord(indxKeep,:);
        
        %shift the coordinates so that the middle of the first pixel is 1
        %in the cropped image
        xCoord(:,1) = xCoord(:,1) - imageRange(2,1) + 1;
        yCoord(:,1) = yCoord(:,1) - imageRange(1,1) + 1;
        
        %calculate coordinates and standard deviations in the new
        %coordinate system of the reconstructed image
        coordStd = mean([xCoord(:,2) yCoord(:,2)],2) * factorSub;
        xCoord = (xCoord(:,1)-0.5) * factorSub + 0.5;
        yCoord = (yCoord(:,1)-0.5) * factorSub + 0.5;
        
        %decompose coordinates into integer value and remaining fractions
        xCoordInt = floor(xCoord);
        yCoordInt = floor(yCoord);
        xCoordDev = xCoord - xCoordInt;
        yCoordDev = yCoord - yCoordInt;
        
        %extract the molecule amplitudes
        amp = movieInfo(iFrame).amp(indxKeep,1);
        numFeat = length(amp);
        
        %initialize empty image for this frame
        image = spalloc(numPixelsNewXY(1),numPixelsNewXY(2),...
            (medianSize^2)*numFeat);
        
        %go over all features
        for iFeat = 1 : numFeat
            
            %generate Gaussian template for this molecule
            if ~useMedianStd
                tmpSize = round(7*coordStd(iFeat));
                tmpSize = tmpSize + (1-mod(tmpSize,2));
                template = GaussMask2D(coordStd(iFeat),tmpSize,[xCoordDev(iFeat) yCoordDev(iFeat)]);
                templateSize = (size(template,1) - 1) / 2;
            end
            
            %add Gaussians to image
            ymin = yCoordInt(iFeat) - templateSize;
            yminOff = max(1 - ymin,0);
            ymin = max(ymin,1);
            ymax = yCoordInt(iFeat) + templateSize;
            ymaxOff = max(ymax - numPixelsNewXY(1),0);
            ymax = min(ymax,numPixelsNewXY(1));
            xmin = xCoordInt(iFeat) - templateSize;
            xminOff = max(1 - xmin,0);
            xmin = max(xmin,1);
            xmax = xCoordInt(iFeat) + templateSize;
            xmaxOff = max(xmax - numPixelsNewXY(2),0);
            xmax = min(xmax,numPixelsNewXY(2));
            image(ymin:ymax,xmin:xmax) = image(ymin:ymax,xmin:xmax) + ...
                template(1+yminOff:end-ymaxOff,1+xminOff:end-xmaxOff)*amp(iFeat);
            
        end
        
        %add this image to combined image
        imageSupRes = imageSupRes + image;
        
    end %(if ~isempty(movieInfo(iFrame).xCoord))
    
    %show reconstruction as movie if requested
    if makeMovie
        
        clf;
        
        switch showConv
            case 1
                axes1 = axes('Parent',figure1,'Position',[0 0 0.495 1],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickConv,'XTickLabel',xTickName,...
                    'YTick',yTickConv,'YTickLabel',yTickName);
                xlim(axes1,[1 numPixelsXY(2)]);
                ylim(axes1,[1 numPixelsXY(1)]);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageConv,'Parent',axes1);
                colormap('gray')
                textDeltaCoord = min(diff(imageRange,[],2))/20;
                text(imageRange(1,1)+textDeltaCoord,imageRange(2,1)+...
                    textDeltaCoord,num2str(iFrame+startend(1)-1),'Color','white');
                axes1 = axes('Parent',figure1,'Position',[0.505 0 0.495 1],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickSR,'XTickLabel',xTickName,...
                    'YTick',yTickSR,'YTickLabel',yTickName);
                xlim(axes1,[1 numPixelsNewXY(2)]);
                ylim(axes1,[1 numPixelsNewXY(1)]);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageSupRes,'Parent',axes1);
                colormap('gray')
            case 2
                axes1 = axes('Parent',figure1,'Position',[0 0.505 1 0.495],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickConv,'XTickLabel',xTickName,...
                    'YTick',yTickConv,'YTickLabel',yTickName);
                xlim(axes1,[1 numPixelsXY(2)]);
                ylim(axes1,[1 numPixelsXY(1)]);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageConv,'Parent',axes1);
                colormap('gray')
                textDeltaCoord = min(diff(imageRange,[],2))/20;
                text(imageRange(1,1)+textDeltaCoord,imageRange(2,1)+...
                    textDeltaCoord,num2str(iFrame+startend(1)-1),'Color','white');
                axes1 = axes('Parent',figure1,'Position',[0 0 1 0.495],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickSR,'XTickLabel',xTickName,...
                    'YTick',yTickSR,'YTickLabel',yTickName);
                xlim(axes1,[1 numPixelsNewXY(2)]);
                ylim(axes1,[1 numPixelsNewXY(1)]);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageSupRes,'Parent',axes1);
                colormap('gray')
            otherwise
                axes1 = axes('Parent',figure1,'Position',[0 0 1 1],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickSR,'XTickLabel',xTickName,...
                    'YTick',yTickSR,'YTickLabel',yTickName);
                xlim(axes1,[1 numPixelsNewXY(2)]);
                ylim(axes1,[1 numPixelsNewXY(1)]);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageSupRes,'Parent',axes1);
                colormap('gray')
                textDeltaCoord = min(diff(imageRange,[],2))/20;
                text((imageRange(1,1)+textDeltaCoord)*factorSub,(imageRange(2,1)+...
                    textDeltaCoord)*factorSub,num2str(iFrame+startend(1)-1),'Color','white');
        end
        
        %add frame to movie if movie is saved
        movieVar = movieInfrastructure('addFrame',movieType,dir2saveRes,...
            movieName,numFramesMovie,movieVar,iFrame);
        
        %pause for a moment to see frame
        pause(0.001);
        
    end %(if makeMovie)
    
    %display progress
    progressText(iFrame/numFramesMovie,'Reconstructing image');
    
end %(for iFrame = 1 : numFramesMovie)

%finish movie
if makeMovie
    movieInfrastructure('finalize',movieType,dir2saveRes,...
        movieName,numFramesMovie,movieVar,[]);
end

%show final conventional image
if showConv
    figure1 = figure;
    axes1 = axes('Parent',figure1,'YDir','reverse','DataAspectRatio',[1 1 1],...
        'XTick',xTickConv,'XTickLabel',xTickName,'YTick',yTickConv,...
        'YTickLabel',yTickName);
    xlim(axes1,[1 numPixelsXY(2)]);
    ylim(axes1,[1 numPixelsXY(1)]);
    box(axes1,'on');
    hold(axes1,'all');
    imagesc(imageConv,'Parent',axes1);
    colormap('gray')
end

%show final reconstructed image
figure1 = figure;
axes1 = axes('Parent',figure1,'YDir','reverse','DataAspectRatio',[1 1 1],...
    'XTick',xTickSR,'XTickLabel',xTickName,'YTick',yTickSR,'YTickLabel',yTickName);
xlim(axes1,[1 numPixelsNewXY(2)]);
ylim(axes1,[1 numPixelsNewXY(1)]);
box(axes1,'on');
hold(axes1,'all');
imagesc(imageSupRes,'Parent',axes1);
colormap('gray')

%save conventional and reconstructed images in a .mat file
if showConv
    save(fullfile(dir2saveRes,'resultsImageReconstruction'),'imageSupRes',...
        'imageConv','factorSub');
else
    save(fullfile(dir2saveRes,'resultsImageReconstruction'),'imageSupRes',...
        'factorSub');
end

%save conventional and reconstructed images as tiff files
%NOTE:
%this requires converting the reconstructed image back to full, so it might
%cause memory problems
%if it does, the code will crash, but by now the whole movie is made and
%the images have been saved in a .mat file, so damage is not complete
if showConv
    imwrite(uint16(imageConv/max(imageConv(:))*(2^16-1)),...
        fullfile(dir2saveRes,'imageConventional.tif'),'tif');
end
fprintf(['NOTE: Code will attempt to save reconstructed image as tiff file. \n This might cause memory problems. \n'...
    'If code crashes, reconstructed image has been saved in output directory. \n'])
imwrite(uint16(full(imageSupRes/max(imageSupRes(:)))*(2^16-1)),fullfile(dir2saveRes,'imageSuperRes.tif'),'tif');
fprintf('Saving successful.\n')


%% ~~~ end ~~~

