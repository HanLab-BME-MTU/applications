function [imageSupRes,factorSR,imageConv] = reconstructImageSR(movieInfo,startend,...
    saveMovie,movieName,showRaw,firstImageFile,dir2saveMovie,movieType)
%RECONSTRUCTIMAGESR reconstructs a "super-resolution" image from single molecule coordinates
%
%SYNPOSIS [imageSupRes,imageConv] = reconstructImageSR(movieInfo,startend,...
%    saveMovie,movieName,showRaw,firstImageFile,dir2saveMovie,movieType)
%
%INPUT  movieInfo   : Output of detectSubResFeatures2D_StandAlone.
%       startend    : Row vector indicating first and last frame to
%                     use for reconstruction. Format: [startframe endframe].
%                     Optional. Default: [1 (maximum available frame)]
%       saveMovie   : 1 to make and save a movie of the reconstruction, 0 otherwise.
%                     Optional. Default: 0
%       movieName   : File name for saving movie.
%                     Optional. Default: FeaturesMovie (if saveMovie = 1).
%       showRaw     : 1 to add conventional image to the left of the
%                     superresolution image, 2 to add conventional image at
%                     the top of the superresolution image, 0 otherwise.
%                     Only for movie making.
%                     Optional. Default: 0.
%       firstImageFile: Name of the first image file in the folder of
%                     images for reconstruction. The file has to be
%                     the first image that has been analyzed even if not
%                     used in reconstruction. If file is not specified [],
%                     user will be prompted to select the first image.
%                     Optional. Default: [].
%       dir2saveMovie: Directory where to save output movie.
%                     If not input, movie will be saved in directory where
%                     images are located.
%                     Optional. Default: [].
%       movieType   : 'mov' to make a Quicktime movie using MakeQTMovie,
%                     'avi' to make AVI movie using Matlab's movie2avi,
%                     'mp4_unix', 'avi_unix' to make an MP4 or AVI movie
%                     using ImageMagick and ffmpeg. These options works
%                     only under linux or mac.
%                     Optional. Default: 'mov'.
%
%OUTPUT imageSupRes : The reconstructed super-resolution image.
%       pixelSizeSR : The ratio of the original pixel size to the
%                     super-resolution image pixel size.
%       imageConv   : The conventional image, generated by adding up all
%                     the individual images.
%
%Khuloud Jaqaman, August 2011

%% Input - basic

%check whether correct number of input arguments was used
if nargin < 1
    disp('--reconstructImageSR: Incorrect number of input arguments!');
    return
end

%ask user for images
if nargin < 6 || isempty(firstImageFile)
    [fName,dirName] = uigetfile('*.tif','specify first image in the stack - specify very first image, even if not to be used');
else
    if iscell(firstImageFile)
        [fpath,fname,fno,fext]=getFilenameBody(firstImageFile{1});
        dirName=[fpath,filesep];
        fName=[fname,fno,fext];
    elseif ischar(firstImageFile)
        [fpath,fname,fno,fext]=getFilenameBody(firstImageFile);
        dirName=[fpath,filesep];
        fName=[fname,fno,fext];
    end
end

%if input is valid ...
if(isa(fName,'char') && isa(dirName,'char'))
    
    %get all file names in stack
    outFileList = getFileStackNames([dirName,fName]);
    numFiles = length(outFileList);
    
    %determine which frames the files correspond to, and generate the inverse map
    %indicate missing frames with a zero
    frame2fileMap = zeros(numFiles,1);
    for iFile = 1 : numFiles
        [~,~,frameNumStr] = getFilenameBody(outFileList{iFile});
        frameNum = str2double(frameNumStr);
        frame2fileMap(frameNum) = iFile;
    end
    
    %assign as number of frames the last frame number observed
    numFrames = frameNum;
    
    %read first image to get image size
    currentImage = imread(outFileList{1});
    [isx,isy] = size(currentImage);
    
else %else, exit
    
    disp('--overlayFeaturesMovie: Bad file selection');
    return
    
end

%check startend and assign default if necessary
if nargin < 2 || isempty(startend)
    startend = [1 numFrames];
else
    startend(2) = min(startend(2),numFrames); %make sure that last frame does not exceed real last frame
end

%keep only the frames of interest
outFileList = outFileList(frame2fileMap(startend(1)):frame2fileMap(startend(2)));
frame2fileMap = frame2fileMap(startend(1):startend(2));
indxNotZero = find(frame2fileMap~=0);
frame2fileMap(indxNotZero) = frame2fileMap(indxNotZero) - frame2fileMap(indxNotZero(1)) + 1;

%retain only the movieInfo of the frames of interest
if isempty(movieInfo)
    movieInfo = repmat(struct('xCoord',[],'yCoord',[],'amp',[]),...
        startend(2)-startend(1)+1,1);
else
    movieInfo = movieInfo(startend(1):startend(2));
end

%get number of frames in movie to be made
numFramesMovie = diff(startend) + 1;

%get image size
imageRange = [1 isx; 1 isy];

%save image size in image coordinates
numPixelsXY = [isy isx];

%% Input - additional parameters

%check whether to save movie
if nargin < 3 || isempty(saveMovie)
    saveMovie = 0;
end

%check name for saving movie
if saveMovie && (nargin < 4 || isempty(movieName))
    movieName = 'featuresMovie';
end

%check whether to put raw movie adjacent to movie with tracks features
if nargin < 5 || isempty(showRaw)
    showRaw = 0;
end

%check where to save resulting movie
if nargin < 7 || isempty(dir2saveMovie)
    dir2saveMovie = dirName;
end

%decide on movie type
if nargin < 8 || isempty(movieType)
    movieType = 'mov';
end

%% Image reconstruction

%initialize movie if it is to be saved
if saveMovie
    movieVar = struct('cdata',[],'colormap',[]);
    movieVar = movieInfrastructure('initialize',movieType,dir2saveMovie,...
        movieName,numFramesMovie,movieVar,[]);
end

%find minimum positional uncertainty
minPosStd = [vertcat(movieInfo.xCoord) vertcat(movieInfo.yCoord)];
minPosStd = min(mean(minPosStd(:,[2 4]),2));

%define the "super-resolution factor", namely the number of pixels that
%each original pixel is divided into such that the minimum positional
%uncertainty = 1 new pixel
factorSR = round(1/minPosStd);

%get number of new pixels
numPixelsNewXY = numPixelsXY*factorSR;

%initialize conventional image
imageConv = zeros(numPixelsXY(2),numPixelsXY(1));

%initialize super-resolution image
imageSupRes = sparse(zeros(numPixelsNewXY(2),numPixelsNewXY(1)));

%make figure for movie
if saveMovie
    figure1 = figure;
end

%initialize progress text
progressText(0,'Reconstructing image');

%define some numbers for axes labeling in movie and final image
xTickConv = imageRange(2,1):100:imageRange(2,2);
if length(xTickConv) == 1
    xTickConv = imageRange(2,:);
end
yTickConv = imageRange(1,1):100:imageRange(1,2);
if length(yTickConv) == 1
    yTickConv = imageRange(1,:);
end
xTickSR = xTickConv*factorSR;
yTickSR = yTickConv*factorSR;
for i = 1 : length(xTickConv)
    xTickName{i} = num2str(xTickConv(i));
end
for i = 1 : length(yTickConv)
    yTickName{i} = num2str(yTickConv(i));
end

%go over all specified frames
for iFrame = 1 : numFramesMovie
    
    %generate conventional image
    if frame2fileMap(iFrame) ~= 0 %if frame exists
        imageStack = double(imread(outFileList{frame2fileMap(iFrame)}));
        imageConv = imageConv + imageStack;
    end
    
    %generate super-resolution image
    if ~isempty(movieInfo(iFrame).xCoord)
        
        %extract the molecule positions and their uncertainties
        xCoord = movieInfo(iFrame).xCoord;
        yCoord = movieInfo(iFrame).yCoord;
        coordStd = mean([xCoord(:,2) yCoord(:,2)],2) * factorSR;
        xCoord = (xCoord(:,1)-0.5) * factorSR + 0.5;
        yCoord = (yCoord(:,1)-0.5) * factorSR + 0.5;
        
        %decompose coordinates into integer value and remaining fractions
        xCoordInt = floor(xCoord);
        yCoordInt = floor(yCoord);
        xCoordDev = xCoord - xCoordInt;
        yCoordDev = yCoord - yCoordInt;
        
        %extract the molecule amplitude
        amp = movieInfo(iFrame).amp(:,1);
        numFeat = length(amp);
        
        %initialize empty image for this frame
        image = sparse(zeros(numPixelsNewXY(2),numPixelsNewXY(1)));
        
        %go over all features
        for iFeat = 1 : numFeat
            
            %generate Gaussian template
            tmpSize = round(7*coordStd(iFeat));
            tmpSize = tmpSize + (1-mod(tmpSize,2));
            template = GaussMask2D(coordStd(iFeat),tmpSize,[xCoordDev(iFeat) yCoordDev(iFeat)]);
            templateSize = (size(template,1) - 1) / 2;
            
            %add Gaussians to image
            ymin = yCoordInt(iFeat) - templateSize;
            yminOff = max(1 - ymin,0);
            ymin = max(ymin,1);
            ymax = yCoordInt(iFeat) + templateSize;
            ymaxOff = max(ymax - numPixelsNewXY(2),0);
            ymax = min(ymax,numPixelsNewXY(2));
            xmin = xCoordInt(iFeat) - templateSize;
            xminOff = max(1 - xmin,0);
            xmin = max(xmin,1);
            xmax = xCoordInt(iFeat) + templateSize;
            xmaxOff = max(xmax - numPixelsNewXY(1),0);
            xmax = min(xmax,numPixelsNewXY(1));
            image(ymin:ymax,xmin:xmax) = image(ymin:ymax,xmin:xmax) + ...
                template(1+yminOff:end-ymaxOff,1+xminOff:end-xmaxOff)*amp(iFeat);
            
        end
        
        %add this image to combined image
        imageSupRes = imageSupRes + image;
        
    end %(if ~isempty(movieInfo(iFrame).xCoord))
    
    %show reconstruction as movie if requested
    if saveMovie
        
        clf;
        
        switch showRaw
            case 1
                %                 axes('Position',[0 0 0.495 1]);
                %                 imshow(imageConv,[]);
                %                 xlim(imageRange(2,:));
                %                 ylim(imageRange(1,:));
                %                 hold on;
                axes1 = axes('Parent',figure1,'Position',[0 0 0.495 1],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickConv,'YTick',yTickConv);
                xlim(axes1,imageRange(2,:));
                ylim(axes1,imageRange(1,:));
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageConv,'Parent',axes1);
                colormap('gray')
                textDeltaCoord = min(diff(imageRange,[],2))/20;
                text(imageRange(1,1)+textDeltaCoord,imageRange(2,1)+...
                    textDeltaCoord,num2str(iFrame+startend(1)-1),'Color','white');
                %                 axes('Position',[0.505 0 0.495 1]);
                %                 imshow(imageSupRes,[]);
                %                 xlim(imageRange(2,:)*factorSR);
                %                 ylim(imageRange(1,:)*factorSR);
                %                 hold on;
                axes1 = axes('Parent',figure1,'Position',[0.505 0 0.495 1],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickSR,'XTickLabel',xTickName,...
                    'YTick',yTickSR,'YTickLabel',yTickName);
                xlim(axes1,imageRange(2,:)*factorSR);
                ylim(axes1,imageRange(1,:)*factorSR);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageSupRes,'Parent',axes1);
                colormap('gray')
            case 2
                %                 axes('Position',[0 0.505 1 0.495]);
                %                 imshow(imageConv,[]);
                %                 xlim(imageRange(2,:));
                %                 ylim(imageRange(1,:));
                %                 hold on;
                axes1 = axes('Parent',figure1,'Position',[0 0.505 1 0.495],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickConv,'YTick',yTickConv);
                xlim(axes1,imageRange(2,:));
                ylim(axes1,imageRange(1,:));
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageConv,'Parent',axes1);
                colormap('gray')
                textDeltaCoord = min(diff(imageRange,[],2))/20;
                text(imageRange(1,1)+textDeltaCoord,imageRange(2,1)+...
                    textDeltaCoord,num2str(iFrame+startend(1)-1),'Color','white');
                %                 axes('Position',[0 0 1 0.495]);
                %                 imshow(imageSupRes,[]);
                %                 xlim(imageRange(2,:)*factorSR);
                %                 ylim(imageRange(1,:)*factorSR);
                %                 hold on;
                axes1 = axes('Parent',figure1,'Position',[0 0 1 0.495],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickSR,'XTickLabel',xTickName,...
                    'YTick',yTickSR,'YTickLabel',yTickName);
                xlim(axes1,imageRange(2,:)*factorSR);
                ylim(axes1,imageRange(1,:)*factorSR);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageSupRes,'Parent',axes1);
                colormap('gray')
            otherwise
                %                 axes('Position',[0 0 1 1]);
                %                 imshow(imageSupRes,[]);
                %                 xlim(imageRange(2,:)*factorSR);
                %                 ylim(imageRange(1,:)*factorSR);
                %                 hold on;
                axes1 = axes('Parent',figure1,'Position',[0 0 1 1],...
                    'YDir','reverse','DataAspectRatio',[1 1 1],...
                    'XTick',xTickSR,'XTickLabel',xTickName,...
                    'YTick',yTickSR,'YTickLabel',yTickName);
                xlim(axes1,imageRange(2,:)*factorSR);
                ylim(axes1,imageRange(1,:)*factorSR);
                box(axes1,'on');
                hold(axes1,'all');
                imagesc(imageSupRes,'Parent',axes1);
                colormap('gray')
                textDeltaCoord = min(diff(imageRange,[],2))/20;
                text((imageRange(1,1)+textDeltaCoord)*factorSR,(imageRange(2,1)+...
                    textDeltaCoord)*factorSR,num2str(iFrame+startend(1)-1),'Color','white');
        end
        
        %add frame to movie if movie is saved
        movieVar = movieInfrastructure('addFrame',movieType,dir2saveMovie,...
            movieName,numFramesMovie,movieVar,iFrame);
        
        %pause for a moment to see frame
        pause(0.001);
        
    end %(if saveMovie)
    
    %display progress
    progressText(iFrame/numFramesMovie,'Reconstructing image');
    
end %(for iFrame = 1 : numFramesMovie)

%finish movie
if saveMovie
    movieInfrastructure('finalize',movieType,dir2saveMovie,...
        movieName,numFramesMovie,movieVar,[]);
end

%show final conventional image
figure1 = figure;
axes1 = axes('Parent',figure1,'YDir','reverse','DataAspectRatio',[1 1 1],...
    'XTick',xTickConv,'YTick',yTickConv);
xlim(axes1,imageRange(2,:));
ylim(axes1,imageRange(1,:));
box(axes1,'on');
hold(axes1,'all');
imagesc(imageConv,'Parent',axes1);
colormap('gray')
% print('-dtiff','-loose','-r300',fullfile(dir2saveMovie,'imageConventional.tif'));

%show final reconstructed image
figure1 = figure;
axes1 = axes('Parent',figure1,'YDir','reverse','DataAspectRatio',[1 1 1],...
    'XTick',xTickSR,'XTickLabel',xTickName,'YTick',yTickSR,'YTickLabel',yTickName);
xlim(axes1,imageRange(2,:)*factorSR);
ylim(axes1,imageRange(1,:)*factorSR);
box(axes1,'on');
hold(axes1,'all');
imagesc(imageSupRes,'Parent',axes1);
colormap('gray')
% print('-dtiff','-loose','-r300',fullfile(dir2saveMovie,'imageSuperRes.tif'));

%save conventional and reconstructed images in a .mat file
save(fullfile(dir2saveMovie,'resultsImageReconstruction'),'imageSupRes','imageConv','factorSR');

%save conventional and reconstructed images as tiff files
%NOTE:
%this requires converting the reconstructed image back to full, so it might
%cause memory problems
%if it does, the code will crash, but by now the whole movie is made and
%the images have been saved in the .mat file, so damage is not complete
imwrite(uint16(imageConv/max(imageConv(:))*(2^16-1)),fullfile(dir2saveMovie,'imageConventional.tif'),'tif');
imwrite(uint16(full(imageSupRes/max(imageSupRes(:)))*(2^16-1)),fullfile(dir2saveMovie,'imageSuperRes.tif'),'tif');


%% ~~~ end ~~~

